<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>A Code Monkey's Blog</title><link href="/" rel="alternate"></link><link href="/feeds/oop.atom.xml" rel="self"></link><id>/</id><updated>2011-02-23T19:57:55-05:00</updated><entry><title>Message passing in OOP?</title><link href="/message-passing-in-oop.html" rel="alternate"></link><updated>2011-02-23T19:57:55-05:00</updated><author><name>jchain</name></author><id>tag:,2011-02-23:message-passing-in-oop.html</id><summary type="html">&lt;p&gt;&lt;a href="http://en.wikipedia.org/wiki/Message_passing#Influences_on_other_programming_models"&gt;http://en.wikipedia.org/wiki/Message_passing#Influences_on_other_programming_models&lt;/a&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;a href="http://en.wikipedia.org/wiki/Alan_Kay"&gt;Alan Kay&lt;/a&gt; has argued&lt;a href="http://en.wikipedia.org/wiki/Message_passing#cite_note-0"&gt;[1]&lt;/a&gt; that message passing is more important than objects in OOP, and that objects themselves are often over-emphasized.&lt;/p&gt;
&lt;/blockquote&gt;</summary></entry><entry><title>Message passing versus calling?</title><link href="/message-passing-versus-calling.html" rel="alternate"></link><updated>2011-02-23T19:48:30-05:00</updated><author><name>jchain</name></author><id>tag:,2011-02-23:message-passing-versus-calling.html</id><summary type="html">&lt;p&gt;My long term confusion about the message passing and calling is answered here:
&lt;a href="http://en.wikipedia.org/wiki/Message_passing#Message_passing_versus_calling"&gt;http://en.wikipedia.org/wiki/Message_passing#Message_passing_versus_calling&lt;/a&gt;&lt;/p&gt;</summary><category term="Event-driven programming"></category><category term="OOP"></category></entry></feed>