<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>A Code Monkey's Blog</title><link href="/" rel="alternate"></link><link href="/feeds/all.atom.xml" rel="self"></link><id>/</id><updated>2014-08-04T13:49:00-04:00</updated><entry><title>Fix the loading dll issue of Octave Cygwin</title><link href="/fix-the-loading-dll-issue-of-octave-cygwin.html" rel="alternate"></link><updated>2014-08-04T13:49:00-04:00</updated><author><name>jchain</name></author><id>tag:,2014-08-04:fix-the-loading-dll-issue-of-octave-cygwin.html</id><summary type="html">&lt;p&gt;Have you run into this loading problem when you start Octave in Cygwin recently? If yes, you are not
alone.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;[zandy@cygwin] ~ $ octave
/usr/bin/octave-cli-3.8.1.exe: error while loading shared libraries: ?: cannot open shared
object file: No such file or directory
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;Diagnose:&lt;/h2&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;[zandy@cygwin] ~ $ cygcheck /usr/bin/octave-cli-3.8.1.exe
C:\cygwin\bin\octave-cli-3.8.1.exe
cygcheck: track_down: could not find cygblas-0.dll
cygcheck: track_down: could not find cygblas-0.dll
cygcheck: track_down: could not find cyglapack-0.dll
cygcheck: track_down: could not find cyglapack-0.dll
cygcheck: track_down: could not find cygblas-0.dll
cygcheck: track_down: could not find cyglapack-0.dll
cygcheck: track_down: could not find cygblas-0.dll
cygcheck: track_down: could not find cyglapack-0.dll
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;It looks like Octave cannot find the shared libraries of &lt;code&gt;blas&lt;/code&gt; and &lt;code&gt;lapack&lt;/code&gt; but they actually have
been installed.&lt;/p&gt;
&lt;h2&gt;Solution:&lt;/h2&gt;
&lt;p&gt;The loading issue is cause by the fact that &lt;code&gt;cygblas-0.dll&lt;/code&gt; and &lt;code&gt;cyglapack-0.dll&lt;/code&gt; were accidentally
installed into &lt;code&gt;/usr/lib/lapack&lt;/code&gt;. According to the &lt;a href="https://access.redhat.com/documentation/en-US/Red_Hat_Enterprise_Linux/4/html/Using_ld_the_GNU_Linker/win32.html"&gt;Cygwin documentation&lt;/a&gt;, Cygwin looks for DLL's
by searching the directories defined in the environment variable &lt;code&gt;PATH&lt;/code&gt;. The default &lt;code&gt;PATH&lt;/code&gt; doesn't
include &lt;code&gt;/usr/lib/lapack&lt;/code&gt;. Therefore, the solution is either&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;cp /usr/lib/lapack/*.dll /bin
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;or&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="x"&gt;export &lt;/span&gt;&lt;span class="p"&gt;$&lt;/span&gt;&lt;span class="nv"&gt;PATH&lt;/span&gt;&lt;span class="x"&gt;=/usr/lib/lapack:&lt;/span&gt;&lt;span class="p"&gt;$&lt;/span&gt;&lt;span class="nv"&gt;PATH&lt;/span&gt;&lt;span class="x"&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;!-- vim: set fdm=expr ft=pandoc sw=4 ts=4 tw=100 : --&gt;</summary><category term="Octave"></category><category term="Cygwin"></category></entry><entry><title>Use Juniper VPN Client under Fedora 20 x86-64</title><link href="/use-juniper-vpn-client-under-fedora-20-x86-64.html" rel="alternate"></link><updated>2014-03-10T15:59:00-04:00</updated><author><name>jchain</name></author><id>tag:,2014-03-10:use-juniper-vpn-client-under-fedora-20-x86-64.html</id><summary type="html">&lt;p&gt;This is my first time to use Juniper VPN to connect to the workplace from home. My computer runs
Fedora 20 in 64bit and Firefox in 64bit. I had a hard time to establish a connection through the web
portal. The client files were downloaded into&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;~/.juniper_networks
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;I followed the instructions listed &lt;a href="http://tuxdna.wordpress.com/2013/07/04/juniper-networks-vpn-from-fedora-17-x86_64/"&gt;here&lt;/a&gt;, &lt;a href="https://github.com/rthill/jvpn"&gt;here&lt;/a&gt;, &lt;a href="https://github.com/rthill/jvpn"&gt;here&lt;/a&gt; and &lt;a href="http://www.scc.kit.edu/scc/net/juniper-vpn/linux/"&gt;here&lt;/a&gt;. None of them
worked. I got stuck by the error message in &lt;code&gt;ncsvc.log&lt;/code&gt;like this:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;ncapp.error Failed to authenticate with IVE.
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Finally this &lt;a href="http://techydodo.wordpress.com/2012/01/17/cracking-the-juniper-network-connect-problem-on-linux-64-bit/"&gt;blog post&lt;/a&gt; saved my day. I confirmed it solved my issue. It turns out sometimes you
have to use the web browser to make the connection. Here is what I did.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Install 32bit Opera&lt;/li&gt;
&lt;li&gt;Install 32bit JRE. Java plugin is stored in &lt;code&gt;/usr/java/default/i386/libnpjp2.so&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Type &lt;code&gt;about:plugins&lt;/code&gt; in the address windows of Opera to find out where the plugins is located. In
   my case it is in &lt;code&gt;/usr/lib/mozilla/plugins&lt;/code&gt; .&lt;/li&gt;
&lt;li&gt;Made a symbolic link of 32bit Java plugin to &lt;code&gt;/usr/lib/mozilla/plugins&lt;/code&gt; .&lt;/li&gt;
&lt;li&gt;Re-visit the VPN login portal to set up the connection.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;You should see the VPN session window pop up and the connection is up. This is the simplest way to
make everything work.&lt;/p&gt;</summary><category term="Linux"></category><category term="VPN"></category></entry><entry><title>Watch Netflix in Linux</title><link href="/watch-netflix-in-linux.html" rel="alternate"></link><updated>2013-11-29T13:09:00-05:00</updated><author><name>jchain</name></author><id>tag:,2013-11-29:watch-netflix-in-linux.html</id><summary type="html">&lt;p&gt;I had watched TV shows on &lt;a href="http://www.hulu.com"&gt;Hulu&lt;/a&gt; for a simple reason that it's Flash-based so I could watch it in
Linux. One thing I did't like about Hulu is its high-frequency of ads. &lt;a href="http://www.netflix.com"&gt;Netflix&lt;/a&gt; has fewer ads
but it builds its business on Silverlight plugin, which is generally exclusive for Windows and Mac
OS. I've never imagined that I could be able to watch movies in Linux until I found &lt;a href="http://fds-team.de/cms/articles/2013-08/pipelight-using-silverlight-in-linux-browsers.html"&gt;Pipelight&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Pipelight is a very smart project that makes use of &lt;a href="http://www.winehq.org"&gt;Wine&lt;/a&gt; to make Silverlight work in Linux web
browser. The website of Pipelight has provides a very complete documentation on the installation for
various Linux distributions. For me the installation for Fedora 19 was a breezy. Of course, you also
need some Firefox &lt;a href="https://addons.mozilla.org/en-US/firefox/addon/user-agent-overrider/"&gt;plugin&lt;/a&gt; to make Netflix believe you are using Windows Firefox. When you first
load Pipelight, Wine will automatically configure everything including downloading Silverlight.
I like this plugin so much. I don't think I will upgrade to Fedora 20 until Pipelight for that
version is available.&lt;/p&gt;
&lt;p&gt;Only one thing I found worth mentioning this time is the update. If your Linux distribution updates
the version of Wine and your Pipelight doesn't work, my solution is to completely remove Wine and
Pipelight and then reinstall them.&lt;/p&gt;
&lt;p&gt;You can how Netflix looks like in my Linux Firefox: &lt;img alt="alt" src="https://db.tt/T0rNtnou" /&gt;&lt;/p&gt;</summary><category term="Linux"></category><category term="Wine"></category></entry><entry><title>Fly with vim airline</title><link href="/fly-with-vim-airline.html" rel="alternate"></link><updated>2013-07-17T16:41:20-04:00</updated><author><name>jchain</name></author><id>tag:,2013-07-17:fly-with-vim-airline.html</id><summary type="html">&lt;p&gt;I recently replaced my &lt;a href="https://github.com/Lokaltog/vim-powerline"&gt;vim-powerline&lt;/a&gt; with &lt;a href="https://github.com/bling/vim-airline"&gt;vim-airline&lt;/a&gt;. I like vim-airline so much that
I can't help spreading words about it.&lt;/p&gt;
&lt;p&gt;For those who don't know what vim-powerline is. It is a Vim plugin that can make the statusline of
Vim colorful and eye candy. When vim-powerline first came out, it caught on very quickly. The author
of vim-powerline even re-wrote it in Python (the project &lt;a href="https://github.com/Lokaltog/powerline"&gt;powerline&lt;/a&gt;) to make it work for more
applications (zsh, Tmux, ipython to name a few). But the current problems are&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;vim-powerline is deprecated. No feature is added. To support other plugins, extra work needs to
   be done (see &lt;a href="https://github.com/zhaocai/linepower.vim)"&gt;linepower&lt;/a&gt;)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;powerline is too heavy for Vim users who believe &lt;em&gt;less is more&lt;/em&gt;. Its dependency in Python
   complicated the installation and uninstallation. I've never set it up successfully. Most
   importantly, it is unstable. Many issues are open.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;I really appreciate the hard work done by the author of vim-powerline. If vim-airline didn't appear,
I would continue to use this plugin.&lt;/p&gt;
&lt;p&gt;Comparing with the former two, vim-airline is lightweight, vimscript-only and actively maintained.
It supports many plugins and the number is increasing. I did a very rough statistics on lines of
code:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;vim-airline:   935 lines
vim-powerline: 2638 lines
powerline:     11067 lines
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;It is impressive that vim-airline uses less than half the code of vim-powerline and all the features
are covered. Here is my settings in &lt;code&gt;.vimrc&lt;/code&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;
&amp;quot; airline
&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;
let g:airline_theme             = &amp;#39;powerlineish&amp;#39;
let g:airline_enable_branch     = 1
let g:airline_enable_syntastic  = 1

&amp;quot; vim-powerline symbols
let g:airline_left_sep          = &amp;#39;⮀&amp;#39;
let g:airline_left_alt_sep      = &amp;#39;⮁&amp;#39;
let g:airline_right_sep         = &amp;#39;⮂&amp;#39;
let g:airline_right_alt_sep     = &amp;#39;⮃&amp;#39;
let g:airline_branch_prefix     = &amp;#39;⭠&amp;#39;
let g:airline_readonly_symbol   = &amp;#39;⭤&amp;#39;
let g:airline_linecolumn_prefix = &amp;#39;⭡&amp;#39;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;To view the unicode glyphs correctly, please use the font patched by &lt;code&gt;fontpatcher&lt;/code&gt; in the github
repo of &lt;a href="https://github.com/Lokaltog/vim-powerline"&gt;vim-powerline&lt;/a&gt; (NOT POWERLINE).&lt;/p&gt;
&lt;p&gt;Another tip. If you start Vim but the statusline is blank like this &lt;img alt="alt" src="https://dl.dropboxusercontent.com/u/309872/blog/vim_lazyredraw_on.png" /&gt;
You may check in your .vimrc if you&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;set lazyredraw
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Comment it. You will see &lt;img alt="alt" src="https://dl.dropboxusercontent.com/u/309872/blog/vim_lazyredraw_off.png" /&gt;&lt;/p&gt;
&lt;p&gt;I strongly recommend this great plugin.&lt;/p&gt;</summary><category term="Vim"></category></entry><entry><title>Fedora 19 and Gnome 3.8</title><link href="/fedora-19-and-gnome-38.html" rel="alternate"></link><updated>2013-07-01T21:10:15-04:00</updated><author><name>jchain</name></author><id>tag:,2013-07-01:fedora-19-and-gnome-38.html</id><summary type="html">&lt;p&gt;Last night I didn't resist the temptation to enter &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;sudo yum install fedora-upgrade
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Viola, my journey to Fedora 19 began!&lt;/p&gt;
&lt;p&gt;Every time I upgraded my Linux to the latest release, either Ubuntu or Fedora, I would have to spent
another day to tweak the new system to make it comfortable to use. The biggest challenge was surely
the transition from GNOME 2 to 3. Two years have passed and I still can't get used to the new UI.
Accurately speaking, I really like the new UI elements in GNOME 3 but I just don't like the ways
that GNOME shell asks me to do things. I think GNOME shell is attractive for new users and
especially good for tablet. But for a senior user, it is too obtrusive. It wanted to be smart but
overdid. &lt;/p&gt;
&lt;p&gt;I appreciated the fallback mode that GNOME 3 provided. I turned off all the fancy animations and
sticked to the old-fashioned UI. I used &lt;a href="http://code.google.com/p/tint2/"&gt;&lt;code&gt;tint2&lt;/code&gt;&lt;/a&gt; as the window list panel. In Fedora 18 with
Gnome 3.6, the clock applet surprisingly had a memory leak issue. I disabled the clock applet and
only used the &lt;code&gt;tint2&lt;/code&gt; panel to show the time. However, sometimes, I missed the weather information.&lt;/p&gt;
&lt;p&gt;With the advent of GNOME 3.8, the fallback was sadly dropped and the 2D GNOME shell was so ugly that
I had to make a change. &lt;/p&gt;
&lt;p&gt;I first tried &lt;a href="http://xfce.org"&gt;&lt;code&gt;Xfce&lt;/code&gt;&lt;/a&gt; and &lt;code&gt;MATE Desktop&lt;/code&gt;. &lt;code&gt;MATE&lt;/code&gt; failed to start on my Fedora 19. I realized that
I was spoiled by the modern UI of GNOME 3 so the look and feel of &lt;code&gt;Xfce&lt;/code&gt; (based on GTK+ 2) became
intolerable. Thank God there is &lt;a href="http://cinnamon.linuxmint.com/"&gt;&lt;code&gt;Cinnamon&lt;/code&gt;&lt;/a&gt;. When Cinnamon was first released, I thought it was
another flamboyant window manager but it turns out sleek and practical. The status bar is very
compact but full of useful information. Window list? Check. Weather applet? Check. Start menu?
Check. Transparency effect? Check. GNOME compatible? Check. I don't need many. These are good
enough. I'm so happy to settle down with Cinnamon. &lt;/p&gt;
&lt;p&gt;Some other issues with GNOME 3.8 are&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;The transparency of the background of GNOME Terminal can't be set. Not a very big deal. But
   some users complained about it. &lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;The upgrade changed my wallpapers for the desktop and the GDM. I really wanted them to be
   kept.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;The theme is broken. Many guys complain about &lt;a href="http://igurublog.wordpress.com/2012/11/05/gnome-et-al-rotting-in-threes/"&gt;that&lt;/a&gt; &lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;</summary><category term="Gnome"></category></entry><entry><title>Fix Neocomplcache to Support Perl Complete</title><link href="/fix-neocomplcache-to-support-perl-complete.html" rel="alternate"></link><updated>2013-06-01T20:37:24-04:00</updated><author><name>jchain</name></author><id>tag:,2013-06-01:fix-neocomplcache-to-support-perl-complete.html</id><summary type="html">&lt;p&gt;I have long been jealous about the great auto-complete feature of Python in Vim. With the wonderful
plugin &lt;a href="https://github.com/Shougo/neocomplcache.vim"&gt;&lt;code&gt;neocomplcache&lt;/code&gt;&lt;/a&gt;, once you type &lt;code&gt;.&lt;/code&gt; after an object, the memeber methods will pop up. &lt;/p&gt;
&lt;p&gt;I want this feature for Perl when I type &lt;code&gt;-&amp;gt;&lt;/code&gt;. Actually, until today haven't I realized that
I already own at my finger tip. The answer is &lt;code&gt;neocomplcache&lt;/code&gt; and &lt;a href="https://github.com/c9s/perlomni.vim"&gt;&lt;code&gt;perlomni&lt;/code&gt;&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;The installation of &lt;code&gt;neocomplcache&lt;/code&gt; and &lt;code&gt;perlomni&lt;/code&gt; is easy. If you use the settings from the help of
&lt;code&gt;neocomplcache&lt;/code&gt;, the key part to triger &lt;code&gt;neocomplcache&lt;/code&gt; omni-complete by &lt;code&gt;-&amp;gt;&lt;/code&gt; is to change the
setting in &lt;code&gt;.vimrc&lt;/code&gt; from  &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;let g:neocomplcache_omni_patterns.perl = &amp;#39;\h\w*-&amp;gt;\h\w*\|\h\w*::&amp;#39;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;to&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;let g:neocomplcache_omni_patterns.perl = &amp;#39;\h\w*-&amp;gt;\|\h\w*-&amp;gt;\h\w*\|\h\w*::\|\h\w*::\h\w*&amp;#39;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Make sure &lt;code&gt;omnifunc&lt;/code&gt; is &lt;code&gt;PerlComplete&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;A little explanation: &lt;code&gt;\h\w*-&amp;gt;&lt;/code&gt; will triger the popup window, &lt;code&gt;\h\w*-&amp;gt;\h\w*&lt;/code&gt; will complete
as-you-type. The similar situation goes to &lt;code&gt;::&lt;/code&gt; operator. But do remember that sometimes &lt;code&gt;::&lt;/code&gt; won't
triger neocomplcache if the package is not based on the OO that perlomni supports. In this case,
&lt;code&gt;C-X C-O&lt;/code&gt; will always pop up the window.  After this you should see someting like this:&lt;/p&gt;
&lt;p&gt;&lt;img alt="alt" src="https://dl.dropboxusercontent.com/u/309872/blog/2013-06-01-perlomni-in-vim.png" /&gt;&lt;/p&gt;</summary></entry><entry><title>Introducing Quickcd</title><link href="/introducing-quickcd.html" rel="alternate"></link><updated>2013-02-08T20:03:24-05:00</updated><author><name>jchain</name></author><id>tag:,2013-02-08:introducing-quickcd.html</id><summary type="html">&lt;p&gt;I just published the code of &lt;code&gt;quickcd&lt;/code&gt; on github. Check it out at &lt;a href="https://github.com/jchain/quickcd"&gt;https://github.com/jchain/quickcd&lt;/a&gt;&lt;/p&gt;
&lt;h1&gt;quickcd&lt;/h1&gt;
&lt;p&gt;A rewrite of &lt;a href="https://github.com/philc/fuzzycd"&gt;fuzzycd&lt;/a&gt; in Perl. You only need to type partial directory names to change
directories. It saves you a lot of keystrokes and enhances your productivity, especially when you
navigate in many subdirectories with tricky names.&lt;/p&gt;
&lt;p&gt;This script is inspired by &lt;a href="https://github.com/philc/fuzzycd"&gt;fuzzycd&lt;/a&gt;. Big thanks to the author for sharing his/her great code.
The way of intercepting the system &lt;code&gt;cd&lt;/code&gt; is genius. I recommend you to try both scripts and choose
the one you like most.&lt;/p&gt;
&lt;h1&gt;Overview&lt;/h1&gt;
&lt;p&gt;quickcd enables you to use cd with partial directory names. For example:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ &lt;span class="nb"&gt;cd&lt;/span&gt; &lt;span class="nv"&gt;box&lt;/span&gt;
  &lt;span class="o"&gt;=&lt;/span&gt;&amp;gt; Dropbox
$ &lt;span class="nb"&gt;cd&lt;/span&gt; &lt;span class="nv"&gt;ok&lt;/span&gt;
  &lt;span class="o"&gt;=&lt;/span&gt;&amp;gt; Ebook
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;If there is more than one directory containing your cd path, you just need to type one more letter
to take you to the target folder.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;~ $ cd D
Make a choice:
[a] Desktop  [b] Documents  [c] Downloads  [d] Dropbox
a
Desktop $
&lt;/pre&gt;&lt;/div&gt;


&lt;h1&gt;Why rewrite?&lt;/h1&gt;
&lt;p&gt;The differences:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;When your cd path contains capital letter quickcd will match case sensitively. This way can
   result in less matches. fuzzycd seems to do case insensitive match all the time.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;quickcd prints out a well-formatted candidates&lt;/strong&gt;. It fits the width of the terminal windows and
   the columns are aligned neatly. I worked really hard on making this right. fuzzycd candidates
   are not always aligned.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;quickcd doesn't support multi-level directory nagivation. Its main focus is current directory.
   fuzzycd supports fuzzy jumps to multi-level directory but I rarely use this feature.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;quickcd is written in Perl. Yep, I like Perl! fuzzycd is written in Ruby.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h1&gt;Setup&lt;/h1&gt;
&lt;p&gt;This following instruction are shamelessly copied from fuzzycd's README.&lt;/p&gt;
&lt;p&gt;Modify your ~/.profile (or ~/.bashrc, depending your operating system) and add the following lines.
This assumes you put fuzzycd in the ~/scripts/ directory.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="x"&gt;export PATH=~/scripts/fuzzycd/:&lt;/span&gt;&lt;span class="p"&gt;$&lt;/span&gt;&lt;span class="nv"&gt;PATH&lt;/span&gt;&lt;span class="x"&gt;&lt;/span&gt;
&lt;span class="x"&gt;source ~/scripts/fuzzycd/fuzzycd_bash_wrapper.sh&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;This will effectively wrap the builtin bash cd command with the fuzzy cd command. Enjoy!&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Note&lt;/em&gt;: If you have any other shell plugins which try to redefine the "cd" function (e.g.
&lt;a href="https://rvm.beginrescueend.com/rvm"&gt;rvm&lt;/a&gt; does this), make sure that the
&lt;code&gt;source ... fuzzycd_bash_wrapper.sh&lt;/code&gt; line comes last in your bash profile. fuzzycd plays nicely with
other bash modification plugins, but it should be loaded last.&lt;/p&gt;</summary></entry><entry><title>Build Feh from source and install to Home directory</title><link href="/build-feh-from-source-and-install-to-home-directory.html" rel="alternate"></link><updated>2013-01-31T15:39:00-05:00</updated><author><name>jchain</name></author><id>tag:,2013-01-31:build-feh-from-source-and-install-to-home-directory.html</id><summary type="html">&lt;p&gt;&lt;a href="http://feh.finalrewind.org/"&gt;&lt;code&gt;Feh&lt;/code&gt;&lt;/a&gt; is a lightweight image viewer for Linux. Its source code doesn't ship the Autoconf script
and only Makefile. The customization is done by modifying the file &lt;code&gt;config.mk&lt;/code&gt;. In my case I would
like to install it to my HOME directory. Plus, I have installed the dependency library &lt;code&gt;giblib&lt;/code&gt; into
HOME directory before so I have to specify the search path for compiler and linker. Here is what
I got so far:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nv"&gt;PACKAGE&lt;/span&gt; &lt;span class="o"&gt;?=&lt;/span&gt; feh
&lt;span class="nv"&gt;VERSION&lt;/span&gt; &lt;span class="o"&gt;?=&lt;/span&gt; 2.8

&lt;span class="c"&gt;# Prefix for all installed files&lt;/span&gt;
&lt;span class="c"&gt;# PREFIX ?= /usr/local&lt;/span&gt;
&lt;span class="nv"&gt;PREFIX&lt;/span&gt; &lt;span class="o"&gt;?=&lt;/span&gt; &lt;span class="si"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;HOME&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;

&lt;span class="c"&gt;# Directories for manuals, executables, docs, data, etc.&lt;/span&gt;
&lt;span class="nv"&gt;main_dir&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="si"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;DESTDIR&lt;/span&gt;&lt;span class="si"&gt;}${&lt;/span&gt;&lt;span class="nv"&gt;PREFIX&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;
&lt;span class="nv"&gt;man_dir&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="si"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;main_dir&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;/share/man
&lt;span class="nv"&gt;bin_dir&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="si"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;main_dir&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;/bin
&lt;span class="nv"&gt;doc_dir&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="si"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;main_dir&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;/share/doc/feh
&lt;span class="nv"&gt;image_dir&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="si"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;main_dir&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;/share/feh/images
&lt;span class="nv"&gt;font_dir&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="si"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;main_dir&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;/share/feh/fonts
&lt;span class="nv"&gt;example_dir&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="si"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;main_dir&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;/share/doc/feh/examples

&lt;span class="c"&gt;# default CFLAGS&lt;/span&gt;
&lt;span class="nv"&gt;CFLAGS&lt;/span&gt; &lt;span class="o"&gt;?=&lt;/span&gt; -g -O2
&lt;span class="nv"&gt;CFLAGS&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; -Wall -Wextra -pedantic

&lt;span class="nv"&gt;curl&lt;/span&gt; &lt;span class="o"&gt;?=&lt;/span&gt; 1
&lt;span class="nv"&gt;debug&lt;/span&gt; &lt;span class="o"&gt;?=&lt;/span&gt; 0
&lt;span class="nv"&gt;help&lt;/span&gt; &lt;span class="o"&gt;?=&lt;/span&gt; 0
&lt;span class="nv"&gt;xinerama&lt;/span&gt; &lt;span class="o"&gt;?=&lt;/span&gt; 1
&lt;span class="nv"&gt;exif&lt;/span&gt; &lt;span class="o"&gt;?=&lt;/span&gt; 0

&lt;span class="cp"&gt;ifeq (${curl},1)&lt;/span&gt;
    CFLAGS +&lt;span class="o"&gt;=&lt;/span&gt; -DHAVE_LIBCURL
    LDLIBS +&lt;span class="o"&gt;=&lt;/span&gt; -lcurl
    &lt;span class="nv"&gt;MAN_CURL&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; enabled
&lt;span class="cp"&gt;else&lt;/span&gt;
    &lt;span class="nv"&gt;MAN_CURL&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; disabled
&lt;span class="cp"&gt;endif&lt;/span&gt;

&lt;span class="cp"&gt;ifeq (${debug},1)&lt;/span&gt;
    CFLAGS +&lt;span class="o"&gt;=&lt;/span&gt; -DDEBUG -O0
    &lt;span class="nv"&gt;MAN_DEBUG&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; . This is a debug build.
&lt;span class="cp"&gt;else&lt;/span&gt;
    &lt;span class="nv"&gt;MAN_DEBUG&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt;
&lt;span class="cp"&gt;endif&lt;/span&gt;

&lt;span class="cp"&gt;ifeq (${help},1)&lt;/span&gt;
    CFLAGS +&lt;span class="o"&gt;=&lt;/span&gt; -DINCLUDE_HELP
&lt;span class="cp"&gt;endif&lt;/span&gt;

&lt;span class="cp"&gt;ifeq (${stat64},1)&lt;/span&gt;
    CFLAGS +&lt;span class="o"&gt;=&lt;/span&gt; -D_FILE_OFFSET_BITS&lt;span class="o"&gt;=&lt;/span&gt;64
&lt;span class="cp"&gt;endif&lt;/span&gt;

&lt;span class="cp"&gt;ifeq (${xinerama},1)&lt;/span&gt;
    CFLAGS +&lt;span class="o"&gt;=&lt;/span&gt; -DHAVE_LIBXINERAMA
    LDLIBS +&lt;span class="o"&gt;=&lt;/span&gt; -lXinerama
    &lt;span class="nv"&gt;MAN_XINERAMA&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; enabled
&lt;span class="cp"&gt;else&lt;/span&gt;
    &lt;span class="nv"&gt;MAN_XINERAMA&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; disabled
&lt;span class="cp"&gt;endif&lt;/span&gt;

&lt;span class="cp"&gt;ifeq (${exif},1)&lt;/span&gt;
    CFLAGS +&lt;span class="o"&gt;=&lt;/span&gt; -DHAVE_LIBEXIF
    LDLIBS +&lt;span class="o"&gt;=&lt;/span&gt; -lexif
    &lt;span class="nv"&gt;MAN_EXIF&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; enabled
&lt;span class="cp"&gt;else&lt;/span&gt;
    &lt;span class="nv"&gt;MAN_EXIF&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; disabled
&lt;span class="cp"&gt;endif&lt;/span&gt;


&lt;span class="c"&gt;# Uncomment this to use dmalloc&lt;/span&gt;
&lt;span class="c"&gt;#CFLAGS += -DWITH_DMALLOC&lt;/span&gt;

&lt;span class="c"&gt;# CFLAGS += -DPREFIX=\&amp;quot;${PREFIX}\&amp;quot; \&lt;/span&gt;
    -DPACKAGE&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="se"&gt;\&amp;quot;&lt;/span&gt;&lt;span class="si"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;PACKAGE&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="se"&gt;\&amp;quot;&lt;/span&gt; -DVERSION&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="se"&gt;\&amp;quot;&lt;/span&gt;&lt;span class="si"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;VERSION&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="se"&gt;\&amp;quot;&lt;/span&gt;
&lt;span class="nv"&gt;CFLAGS&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; -DPREFIX&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="se"&gt;\&amp;quot;&lt;/span&gt;&lt;span class="si"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;PREFIX&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="se"&gt;\&amp;quot;&lt;/span&gt; &lt;span class="se"&gt;\&lt;/span&gt;
    -DPACKAGE&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="se"&gt;\&amp;quot;&lt;/span&gt;&lt;span class="si"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;PACKAGE&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="se"&gt;\&amp;quot;&lt;/span&gt; -DVERSION&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="se"&gt;\&amp;quot;&lt;/span&gt;&lt;span class="si"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;VERSION&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="se"&gt;\&amp;quot;&lt;/span&gt; -I&lt;span class="si"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;PREFIX&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;/include

&lt;span class="c"&gt;# LDLIBS += -lm -lpng -lX11 -lImlib2 -lgiblib&lt;/span&gt;
&lt;span class="nv"&gt;LDLIBS&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; -lm -lpng -lX11 -lImlib2 -lgiblib -L&lt;span class="si"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;PREFIX&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;/lib64/
&lt;/pre&gt;&lt;/div&gt;</summary></entry><entry><title>Install RcppOctave if Octave is in user-defined directory</title><link href="/install-rcppoctave-if-octave-is-in-user-defined-directory.html" rel="alternate"></link><updated>2013-01-28T23:43:00-05:00</updated><author><name>jchain</name></author><id>tag:,2013-01-28:install-rcppoctave-if-octave-is-in-user-defined-directory.html</id><summary type="html">&lt;p&gt;Even though I have been very busy these days I think I should try to get at least one post published
per month. My recent job involved a lot of data analysis and statistical computing. I pushed myself
to get familiar with &lt;a href="http://www.r-project.org"&gt;R&lt;/a&gt; because some packages from R are indispensable for my work. Meanwhile
I also wanted to reuse my existing &lt;a href="http://www.octave.org"&gt;Octave&lt;/a&gt; code. Luckily I get the best of both worlds by using
&lt;a href="http://cran.r-project.org/web/packages/RcppOctave/"&gt;RcppOctave&lt;/a&gt; which is a bridging package connecting the R and Octave sessions. &lt;/p&gt;
&lt;p&gt;I compiled the latest Octave on the server and installed in my home directory. When installing
&lt;code&gt;RcppOctave&lt;/code&gt; in R by running&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;install.packages(&amp;#39;RcppOctave&amp;#39;)
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;I ran into an error message like this:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;** preparing package for lazy loading
Creating a generic function for ‘show’ from ‘methods’ in package ‘RcppOctave’
    (from the saved implicit definition)
** help
Error : /tmp/Rtmp028JZY/R.INSTALL6dea26e533ee/RcppOctave/man/o_addpath.Rd:40: unable to load
shared object &amp;#39;/home/zandy/lib64/R/library/RcppOctave/libs/RcppOctave.so&amp;#39;:
liboctinterp.so.1: cannot open shared object file: No such file or directory

ERROR: installing Rd objects failed for package ‘RcppOctave’
* removing ‘/home/zandy/lib64/R/library/RcppOctave’
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;The build phase seemed OK. Only did the install phase complain. I spent some time and figured out
a work-around is to specify the library path to your &lt;code&gt;liboctinterp.so&lt;/code&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="x"&gt;export LD_LIBRARY_PATH=&lt;/span&gt;&lt;span class="p"&gt;$&lt;/span&gt;&lt;span class="nv"&gt;LD_LIBRARY_PATH&lt;/span&gt;&lt;span class="x"&gt;:&lt;/span&gt;&lt;span class="p"&gt;$&lt;/span&gt;&lt;span class="nv"&gt;HOME&lt;/span&gt;&lt;span class="x"&gt;/lib64/octave/3.6.3&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;I don't know much about the internal mechanism of &lt;code&gt;install.packages&lt;/code&gt; otherwise I may be able to fix
the problem completely.&lt;/p&gt;</summary></entry><entry><title>Vim gets slow when editing LaTeX file</title><link href="/vim-gets-slow-when-editing-latex-file.html" rel="alternate"></link><updated>2012-12-26T04:10:00-05:00</updated><author><name>jchain</name></author><id>tag:,2012-12-26:vim-gets-slow-when-editing-latex-file.html</id><summary type="html">&lt;p&gt;Recently I have been working on editing multiple LaTeX files containing many lines and equations.
I noticed there was an annoying slowdown when I moved the cursor around. CPU usage jumped to 100% so
frequently that I almost lost patience to focus on the writing itself. &lt;/p&gt;
&lt;p&gt;After tweaking the Vim plugins and configurations for a while, I found out &lt;code&gt;set cursorline&lt;/code&gt; and the
built-in plugin &lt;code&gt;MatchParen&lt;/code&gt; made Vim scrolling very slow. Some people seemed to have run into the
same problem as mentioned &lt;a href="http://haerench.blogspot.com/2012/12/cursorline-cursorcolumn-and-syntax.html"&gt;here&lt;/a&gt; and &lt;a href="https://bbs.archlinux.org/viewtopic.php?id=111647"&gt;here&lt;/a&gt;. Some complained that Vim got slow when editing
Ruby file. And I use Vim in terminal.&lt;/p&gt;
&lt;p&gt;I have no idea why Vim drawing is so CPU expensive. At this moment I disabled the highlighting of
&lt;code&gt;cursorline&lt;/code&gt; and &lt;code&gt;cursorcolumn&lt;/code&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;set nocursorline
set nocursorcolumn
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;I also notice that cursor movements in the equation environment was very slow partially it was
because the math equations had so many parentheses, brackets and braces. Matching pairs and syntax
highlighting easily ate a good amount of CPU cycles. So I turned off this plugin by  &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;:NoMatchParen
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;I didn't completely disable this plugin since I found that it was useful when editing long
equations. So I didn't try this in &lt;code&gt;.vimrc&lt;/code&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;let g:loaded_matchparen=1
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;I found some other tweaks by using Vim's &lt;code&gt;:profile&lt;/code&gt; command and the verbose options &lt;code&gt;vim -V
foo.bar&lt;/code&gt;. They are good ways to try to analyze the slowdown.&lt;/p&gt;
&lt;p&gt;The lesson I learned:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;All-around syntax highlighting seems a little bit expensive in Vim. Emacs seems to beat Vim on
   this point. &lt;/li&gt;
&lt;li&gt;Use &lt;code&gt;autocmd FileType&lt;/code&gt; to further tweak the performance, such as disable the
   unnecessary plugins.&lt;/li&gt;
&lt;/ol&gt;</summary></entry><entry><title>Install nVidia Driver on Fedora 17: A Non-typical Case</title><link href="/install-nvidia-driver-on-fedora-17-a-non-typical-case.html" rel="alternate"></link><updated>2012-11-28T02:10:00-05:00</updated><author><name>jchain</name></author><id>tag:,2012-11-28:install-nvidia-driver-on-fedora-17-a-non-typical-case.html</id><summary type="html">&lt;p&gt;Finally I succeeded in installing the nVidia driver on my old Dell Inspiron 530 geared an old nVidia
8300 GS video card running Fedora 17 i386. Here is a quick recap on my journey with Fedora 17. &lt;/p&gt;
&lt;p&gt;I started constantly using Fedora 17 half a year ago. I had used the default open source nVidia
driver &lt;code&gt;nouveau&lt;/code&gt; happily until the system updated the kernel from the 3.3.4 to some newer version.
None of these newer kernels worked well with the &lt;code&gt;nouveau&lt;/code&gt; driver. A common issue was the mouse was
drawn as a big block and the GUI color was totally garbage. I tried to install the nVidia driver
either according to &lt;a href="http://www.if-not-true-then-false.com/2012/fedora-17-nvidia-guide/"&gt;what it said&lt;/a&gt; or using the installer from the official website of nVidia.
But neither way worked. I could see the mouse was spinning but the whole system kept froze. So I
excluded the kernel update in &lt;code&gt;yum.conf&lt;/code&gt; under &lt;code&gt;/etc&lt;/code&gt;. Everything was fine until one day my Fedora
Linux suddenly crashed with a kernel panic error. The traceback message indicated it was about a
kernel bug in the ext4 file system&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;kernel BUG at fs/ext4/extents.c
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Initially I thought it could be due to certain bad blocks on my hard drive. But soon the hacker news
confirmed that the bug in the kernel was the culprit. After several sudden losses of my working
sessions I couldn't wait for any more seconds to update the kernel. And I had to make the Xorg
server work too.&lt;/p&gt;
&lt;p&gt;It really bugged me that the nVidia driver didn't work on my Fedora 17. I booted from Ubuntu Linux
installed on an external USB disk. And the nVidia driver worked fine under it. There must be
something wrong with &lt;code&gt;akmod-nvidia&lt;/code&gt; or the official driver.&lt;/p&gt;
&lt;p&gt;Accidentally I found the solution. It appeared that my 8300GS card was not supported very well in
the recent 3xx driver. I guess this type was not very common. I tried &lt;code&gt;akmod-nvidia-173xx&lt;/code&gt; and X
server started this time. In my case, I didn't need to do this:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;Remove / disable nouveau drivers from kernel initramfs
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;The remaining issue was the OpenGL apps were indirectly rendered. It was due to the nVidia GL
library was not automatically loaded. The system still used the mesa GL to do the software
rendering. A workaround is to put the following line in &lt;code&gt;.bashrc&lt;/code&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="x"&gt;export LD_LIBRARY_PATH=/usr/lib/nvidia:&lt;/span&gt;&lt;span class="p"&gt;$&lt;/span&gt;&lt;span class="nv"&gt;LD_LIBRARY_PATH&lt;/span&gt;&lt;span class="x"&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Another problem was the dual displays. The default &lt;code&gt;xorg.conf&lt;/code&gt; generated by &lt;code&gt;akmod-nvidia-173xx&lt;/code&gt;
didn't support the twin views. Additionally, &lt;code&gt;nvidia-settings&lt;/code&gt; complained the X11 driver was too old
to be configured. Fortunately I had a copy of working &lt;code&gt;xorg.conf&lt;/code&gt; at my Ubuntu partition. And here
is what it looks right now.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;# RPM Fusion - nvidia-173xx-xorg.conf
# 
Section &amp;quot;Monitor&amp;quot;
    # HorizSync source: edid, VertRefresh source: edid
    Identifier     &amp;quot;Monitor0&amp;quot;
    VendorName     &amp;quot;Unknown&amp;quot;
    ModelName      &amp;quot;DELL E228WFP&amp;quot;
    HorizSync       30.0 - 83.0
    VertRefresh     56.0 - 75.0
    Option         &amp;quot;DPMS&amp;quot;
EndSection

Section &amp;quot;Device&amp;quot;
    Identifier  &amp;quot;Device0&amp;quot;
    Driver      &amp;quot;nvidia&amp;quot;
    Option      &amp;quot;AddARGBGLXVisuals&amp;quot; &amp;quot;true&amp;quot;
EndSection

Section &amp;quot;Screen&amp;quot;
    Identifier     &amp;quot;Screen0&amp;quot;
    Device         &amp;quot;Device0&amp;quot;
    Monitor        &amp;quot;Monitor0&amp;quot;
    DefaultDepth    24
    Option         &amp;quot;TwinView&amp;quot; &amp;quot;1&amp;quot;
    Option         &amp;quot;TwinViewXineramaInfoOrder&amp;quot; &amp;quot;DFP-0&amp;quot;
    Option         &amp;quot;metamodes&amp;quot; &amp;quot;DFP: nvidia-auto-select +0+0, CRT: nvidia-auto-select +1680+0&amp;quot;
    SubSection     &amp;quot;Display&amp;quot;
        Depth       24
    EndSubSection
EndSection
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;I'm so excited to have my Fedora back in good shape and I want share my story with you. Hopefully it
will help you if you are facing the same problem.&lt;/p&gt;</summary></entry><entry><title>Perl one liner: replace text in mulple files</title><link href="/perl-one-liner-replace-text-in-mulple-files.html" rel="alternate"></link><updated>2012-11-17T02:10:00-05:00</updated><author><name>jchain</name></author><id>tag:,2012-11-17:perl-one-liner-replace-text-in-mulple-files.html</id><summary type="html">&lt;p&gt;Today I got some time to improve my tech blog with &lt;a href="http://octopress.org"&gt;Octopress&lt;/a&gt;. I found that I couldn't use the
different letter cases as the same category name. Otherwise the category page wouldn't show correct
number of links to the posts under that category. For example, I had to change all &lt;code&gt;git&lt;/code&gt; to &lt;code&gt;Git&lt;/code&gt; in
the meta info of every posts. Here was what I used to get this job done.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;ack &amp;quot;\- git&amp;quot; *.markdown -l | xargs perl -p -i -e &amp;#39;s/- git/- Git/g&amp;#39;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;A little explanation:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;-l: ask ack to only show the filename with matched search pattern. You can try first without -l
    option to make sure you find the correct files. And then run with -l option to make the output
    suitable for xargs
-p: read and loop from files instead of STDIN
-i: in-place edit
-e: run the command. Here we do the search and replace operations.
&lt;/pre&gt;&lt;/div&gt;</summary></entry><entry><title>Nomachine and GNOME Redraw Problem</title><link href="/nomachine-and-gnome-redraw-problem.html" rel="alternate"></link><updated>2012-11-16T15:36:00-05:00</updated><author><name>jchain</name></author><id>tag:,2012-11-16:nomachine-and-gnome-redraw-problem.html</id><summary type="html">&lt;p&gt;I use &lt;a href="http://www.nomachine.com"&gt;Nomachine&lt;/a&gt; a lot when I work from home. My home and work Linux desktop are both running
GNOME 3. There were a problem disturbing me for a while. Everything works fine at workplace probably
due to the supper fast local internet connection. But when I connected to the remote desktop via
Nomachine, the GUIs of remote applications were very lagging and the redraws seemed out of sync
leaving blanks here and there. I've tried many ways to improve that, including upgrading the ISP
bandwidth, trying the latest NoMachine 4 Preview, tuning the various options in the settings. But
all efforts were vain. Until one day I aimlessly chose KDE in NoMachine and the redraw issue were
gone. Every GUI programs ran perfectly in KDE, both GTK+ ones and non-GTK+ ones.&lt;/p&gt;</summary></entry><entry><title>Octave: Add local repository path based on the hostname, change the color of prompt etc..</title><link href="/add-octave-load-path-based-on-the-hostname-change-the-color-of-prompt-etc.html" rel="alternate"></link><updated>2012-10-13T08:38:46-04:00</updated><author><name>jchain</name></author><id>tag:,2012-10-13:add-octave-load-path-based-on-the-hostname-change-the-color-of-prompt-etc.html</id><summary type="html">&lt;p&gt;In my everyday work I use Git to do the version control over my dotfiles. I share my .octaverc cross
different computers (four different Linux machine). I also maintain a list of local M-file repos.
Not all repos are available on every machine. To get rid of the warning message for missing
directory every time, I wished I could add my local directories dynamically based on the hostname.
I didn't know how to do so until today I found that Octave actually has the function 'uname()' for
the job. Here is an example ~/.octaverc&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;strcmp&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;uname&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;nodename&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;zandyware&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
 &lt;span class="n"&gt;addpath&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;~/octave&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
 &lt;span class="n"&gt;addpath&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;~/share/flann/octave&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
 &lt;span class="n"&gt;addpath&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;~/octave/niftimatlib-1.2/matlab&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;end&lt;/span&gt;

&lt;span class="n"&gt;PS1&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="se"&gt;\\&lt;/span&gt;&lt;span class="s2"&gt;[&lt;/span&gt;&lt;span class="se"&gt;\\&lt;/span&gt;&lt;span class="s2"&gt;033[01;31m&lt;/span&gt;&lt;span class="se"&gt;\\&lt;/span&gt;&lt;span class="s2"&gt;]&lt;/span&gt;&lt;span class="se"&gt;\\&lt;/span&gt;&lt;span class="s2"&gt;s:&lt;/span&gt;&lt;span class="se"&gt;\\&lt;/span&gt;&lt;span class="s2"&gt;#&amp;gt; &lt;/span&gt;&lt;span class="se"&gt;\\&lt;/span&gt;&lt;span class="s2"&gt;[&lt;/span&gt;&lt;span class="se"&gt;\\&lt;/span&gt;&lt;span class="s2"&gt;033[0m&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="n"&gt;function&lt;/span&gt; &lt;span class="n"&gt;man&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
 &lt;span class="n"&gt;help&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;char&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;span class="n"&gt;endfunction&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;You may also notice that I changed the default color of prompt to red for better visual contrast.
Also I defined a function 'man' to alias the built-in command 'help' since I'm more used to type
'man'. This tip was copied from Octave mailinglist. Hope you like today's post.&lt;/p&gt;</summary><category term="Octave"></category></entry><entry><title>Quickly look up a word or phrase from commandline</title><link href="/quickly-look-up-a-word-or-phrase-from-commandline.html" rel="alternate"></link><updated>2012-09-28T19:46:55-04:00</updated><author><name>jchain</name></author><id>tag:,2012-09-28:quickly-look-up-a-word-or-phrase-from-commandline.html</id><summary type="html">&lt;p&gt;I wrote two very short Bash functions to help me quickly look up a word or phrase using
&lt;a href="http://elinks.or.cz/"&gt;elinks&lt;/a&gt;. You can use w3m as you wish but elinks shows a better layout in my
eyes.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;# look up on urbandictionary.com&lt;/span&gt;

ub &lt;span class="o"&gt;()&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
 &lt;span class="nv"&gt;a&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nv"&gt;$@&lt;/span&gt;
 elinks www.urbandictionary.com/&lt;span class="si"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;a&lt;/span&gt;&lt;span class="p"&gt;// /%20&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;

&lt;span class="c1"&gt;# look up on thefreedictionary.com&lt;/span&gt;
fd &lt;span class="o"&gt;()&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
 &lt;span class="nv"&gt;a&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nv"&gt;$@&lt;/span&gt;
 elinks www.thefreedictionary.com/&lt;span class="si"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;a&lt;/span&gt;&lt;span class="p"&gt;// /+&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Usage:
    ub your_word
    fd your_word&lt;/p&gt;</summary><category term="Bash"></category><category term="Linux"></category><category term="tips"></category></entry><entry><title>MC (Midnight-Commander) 4.8.5 is slow, try 4.8.6</title><link href="/mc-midnight-commander-4-8-5-is-slow-try-4-8-6.html" rel="alternate"></link><updated>2012-09-28T04:57:17-04:00</updated><author><name>jchain</name></author><id>tag:,2012-09-28:mc-midnight-commander-4-8-5-is-slow-try-4-8-6.html</id><summary type="html">&lt;p&gt;Recently MC was upgraded from 4.7.x to 4.8.5 on my 32bit Fedora 17. The start-up time was totally
unbearable, around 15 sec to start. I compiled the latest release v4.8.6 and that time dropped to
the negligible (&amp;lt; 1sec).&lt;/p&gt;</summary><category term="Linux"></category></entry><entry><title>Perl script: retrieve current weather condition and forecast</title><link href="/perl-script-retrieve-current-weather-condition-and-forecast.html" rel="alternate"></link><updated>2012-09-26T02:33:42-04:00</updated><author><name>jchain</name></author><id>tag:,2012-09-26:perl-script-retrieve-current-weather-condition-and-forecast.html</id><summary type="html">&lt;p&gt;I'm a little tired of checking out the weather condition via the web browser. In many cases I just
want to see a short report in my terminal. After
reading &lt;a href="http://blogs.perl.org/users/zengargoyle/2012/08/not-to-hot-for-mojo.html"&gt;http://blogs.perl.org/users/zengargoyle/2012/08/not-to-hot-for-mojo.html&lt;/a&gt;,
which shows how to use Mojolicious to retrieve the current condition and
&lt;a href="http://www.commandlinefu.com/commands/view/4821/get-the-weather-forecast-for-the-next-24-to-48-for-your-location."&gt;http://www.commandlinefu.com/commands/view/4821/get-the-weather-forecast-for-the-next-24-to-48-for-your-location&lt;/a&gt;,
which shows how to retried the forecast, I finally wrote something like this&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="ch"&gt;#!/usr/bin/env perl&lt;/span&gt;
&lt;span class="c1"&gt;#===============================================================================&lt;/span&gt;
&lt;span class="c1"&gt;#&lt;/span&gt;
&lt;span class="c1"&gt;# FILE: weather.pl&lt;/span&gt;
&lt;span class="c1"&gt;#&lt;/span&gt;
&lt;span class="c1"&gt;# USAGE: ./weather.pl&lt;/span&gt;
&lt;span class="c1"&gt;#&lt;/span&gt;
&lt;span class="c1"&gt;# VERSION: 1.0&lt;/span&gt;
&lt;span class="c1"&gt;# CREATED: 09/13/2012 10:31:39 PM&lt;/span&gt;
&lt;span class="c1"&gt;# REVISION: ---&lt;/span&gt;
&lt;span class="c1"&gt;#===============================================================================&lt;/span&gt;

&lt;span class="k"&gt;use&lt;/span&gt; &lt;span class="n"&gt;strict&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;use&lt;/span&gt; &lt;span class="n"&gt;warnings&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;use&lt;/span&gt; &lt;span class="n"&gt;feature&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;say&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;use&lt;/span&gt; &lt;span class="n"&gt;Mojolicious&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;my&lt;/span&gt; &lt;span class="nv"&gt;$ua&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nn"&gt;Mojo::&lt;/span&gt;&lt;span class="n"&gt;UserAgent&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="k"&gt;new&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;my&lt;/span&gt; &lt;span class="nv"&gt;$dom&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nv"&gt;$ua&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;http://w1.weather.gov/xml/current_obs/KCID.xml&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;res&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;dom&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;my&lt;/span&gt; &lt;span class="nv"&gt;$temp&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nv"&gt;$dom&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;find&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;temperature_string&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;text&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;my&lt;/span&gt; &lt;span class="nv"&gt;$weather&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nv"&gt;$dom&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;find&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;weather&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;text&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="n"&gt;say&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;KCID &amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nv"&gt;$temp&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;quot; &amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nv"&gt;$weather&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;\n&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="nv"&gt;$dom&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt;
&lt;span class="nv"&gt;$ua&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;http://api.wunderground.com/auto/wui/geo/ForecastXML/index.xml?query=Cedar%20Rapids&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;res&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;dom&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="k"&gt;my&lt;/span&gt; &lt;span class="nv"&gt;$e&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$dom&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;find&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;simpleforecast forecastday&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="nb"&gt;each&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
 &lt;span class="k"&gt;my&lt;/span&gt; &lt;span class="nv"&gt;$day&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nv"&gt;$e&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;date&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;day&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;text&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
 &lt;span class="k"&gt;my&lt;/span&gt; &lt;span class="nv"&gt;$month&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;substr&lt;/span&gt; &lt;span class="nv"&gt;$e&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;date&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;monthname&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;text&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
 &lt;span class="k"&gt;my&lt;/span&gt; &lt;span class="nv"&gt;$weekday&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;substr&lt;/span&gt; &lt;span class="nv"&gt;$e&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;date&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;weekday&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;text&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
 &lt;span class="k"&gt;my&lt;/span&gt; &lt;span class="nv"&gt;$condition&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nv"&gt;$e&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;conditions&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;text&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
 &lt;span class="k"&gt;my&lt;/span&gt; &lt;span class="nv"&gt;$high&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nv"&gt;$e&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;high&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;fahrenheit&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;text&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
 &lt;span class="k"&gt;my&lt;/span&gt; &lt;span class="nv"&gt;$low&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nv"&gt;$e&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;low&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;fahrenheit&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;text&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="nb"&gt;printf&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;%s %s %s, Low: %d, High: %d, %s\n&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nv"&gt;$weekday&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nv"&gt;$month&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nv"&gt;$day&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nv"&gt;$low&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nv"&gt;$high&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nv"&gt;$condition&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;This is how it runs from the terminal:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;zandyware@zandyware&lt;span class="o"&gt;]&lt;/span&gt; bin $ ./weather.pl
KCID 63.0 F &lt;span class="o"&gt;(&lt;/span&gt;17.2 C&lt;span class="o"&gt;)&lt;/span&gt; Fair

Tue Sep 25, Low: 46, High: 81, Clear
Wed Sep 26, Low: 39, High: 70, Clear
Thu Sep 27, Low: 45, High: 70, Clear
Fri Sep 28, Low: 46, High: 70, Partly Cloudy
Sat Sep 29, Low: 45, High: 72, Clear
Sun Sep 30, Low: 41, High: 73, Clear
&lt;/pre&gt;&lt;/div&gt;</summary><category term="Perl"></category></entry><entry><title>Use Perl like sed</title><link href="/use-perl-like-sed.html" rel="alternate"></link><updated>2012-09-14T16:29:58-04:00</updated><author><name>jchain</name></author><id>tag:,2012-09-14:use-perl-like-sed.html</id><summary type="html">&lt;p&gt;Recently I wanted to use Perl and Bash to deal with a large number of files. I ended up needing
in-line string substitution to create new shell commands. I vaguely had an idea that I should use
'sed' to do the text transform but by any chance I would like to use Perl. I rarely use Perl as
one-liner. It turned out that this is the correct way to do so&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;find . -name &amp;quot;*.java&amp;quot; -print | perl -ne &amp;#39;s/java/java.old/g &amp;amp;&amp;amp; print&amp;#39;
&lt;/pre&gt;&lt;/div&gt;</summary><category term="Perl"></category></entry><entry><title>How to show GNOME top panel from keyboard?</title><link href="/how-to-show-gnome-top-panel-from-keyboard.html" rel="alternate"></link><updated>2012-08-19T07:06:46-04:00</updated><author><name>jchain</name></author><id>tag:,2012-08-19:how-to-show-gnome-top-panel-from-keyboard.html</id><summary type="html">&lt;p&gt;My computer display is not big so I have tried ways to save my screen real-estate. It looks to me that the designers of GNOME 3 must have a huge display.  The default window title bar are too high in my view. Besides the top panel is thicker than that in Unity. To make my life easier, I first installed the GTK+ 3.x theme from &lt;a href="http://www.gnome-look.org"&gt;gnome-look.org&lt;/a&gt; to reduce the height of the title bar. Then I set the top panel of GNOME desktop to 'auto hide'. But whenever I want to look at the weather or the time I have to move mouse over it to make it show. This is tedious. I searched online for a shortcut to show it. Many of results are prior to GNOME 3. Besides, I don't like the methods to change the 'gsetting' or 'gconf'.&lt;/p&gt;
&lt;p&gt;It turns out that the simplest way to to hit 'Alt+F1' to activate the 'Application' in the top panel and hit 'Esc' to hide it again. So simple.&lt;/p&gt;
&lt;p&gt;BTW: I'm using the fallback of GNOME 3.&lt;/p&gt;</summary></entry><entry><title>Add the remote git repository for your open-source collabration</title><link href="/add-the-remote-git-repository-for-your-open-source-collabration.html" rel="alternate"></link><updated>2012-07-02T00:39:25-04:00</updated><author><name>jchain</name></author><id>tag:,2012-07-02:add-the-remote-git-repository-for-your-open-source-collabration.html</id><summary type="html">&lt;p&gt;When I hacked on github I would clone the upstream repository FOO into my local disk creating a 'master' branch. I hacked there and formatted a patch to the upstream repo owner. But I quickly found the need that I wanted to have my github-hosted 'master' branch since I wanted my local hack could be backed up and synced online. So I changed my workflow. For any git project I was interested to hack I would create a new cloned repo my_FOO from the original on github under my owership. Then I git clone this my_FOO/master(origin/master) into a local branch 'master' and I would hack under this branch.&lt;/p&gt;
&lt;p&gt;But after my hack right before I fire up the 'git format-patch' command, I would like to have  a updated upstream master branch available so that I can format my patch to the latest code base. Also I would like to update the code from the upstream everyday to keep tracking the latest changes. The command 'git remote' will help. I found a good documentation on this issue. Check it out &lt;a href="http://gitref.org/remotes/"&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Here is a short summary:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;Suppose the original project is called FOO. We create a new repo called my_FOO by imported the code from the git repo of FOO&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;git clone git://git.github.com/my_FOO.git. You will have a local master branch&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;git remote add FOO_origin git://git.github.com/FOO.git. You will add a new remote repo in your .git/config&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;git fetch FOO_origin. You have to do this to get the branch information about FOO_origin before step 5.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;git branch --set-upstream FOO_master FOO_origin/master. Create a local branch named FOO_master to keep track the upstream's master branch.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Done. use 'git branch' to check the result.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;OK. After these steps, you can code in the 'master' branch, commit and push to the repo 'my_FOO' for the benefit of online backup and sync. You can switch to FOO_master to pull the upstream changes and merge to your 'master' branch. When you feel ready to format a patch, just type 'git format-patch FOO_master'.&lt;/p&gt;
&lt;p&gt;Of cause there are issues like commit squash but that is another topic so I don't mention here. I'm surprised to see there are tons of git questions flying around on the web. After all git is really a complicated tool with a much higher learning curve than Subversion. For some particular use cases I find it make sense to blog them here for my own future reference instead of searching online but retrieved a lot of partially related answers.&lt;/p&gt;</summary><category term="Git"></category></entry><entry><title>Fix the broken Bash file and directory name completion on Ubuntu Linux</title><link href="/fix-the-broken-bash-file-and-directory-name-completion-on-ubuntu-linux.html" rel="alternate"></link><updated>2012-06-02T22:12:54-04:00</updated><author><name>jchain</name></author><id>tag:,2012-06-02:fix-the-broken-bash-file-and-directory-name-completion-on-ubuntu-linux.html</id><summary type="html">&lt;p&gt;I didn't remember ever since when my Bash filename and directory name completion functioned wackily. Everytime I hit 'tab' to complete a directory name, Bash didn't append the backslash nor printed out candidates (just like what it described like &lt;a href="http://ubuntuforums.org/showthread.php?t=1053832"&gt;here&lt;/a&gt; and &lt;a href="http://timlabath.com/words/2011/05/10/ubuntu-11-04-and-broken-bash-completion/"&gt;here&lt;/a&gt;). It drove me banana. Meanwhile, my Bash worked very well under other Linux distributions (openSUSE, CentOS). The culprit was the a Bash completion file for adobe acrobat reader under /etc/bash_completion.d/. Delete it and the problem will be solved.&lt;/p&gt;</summary><category term="Bash"></category><category term="Linux"></category></entry><entry><title>My favorite Makefile for LaTeX</title><link href="/my-favorite-makefile-for-latex.html" rel="alternate"></link><updated>2012-06-02T21:33:12-04:00</updated><author><name>jchain</name></author><id>tag:,2012-06-02:my-favorite-makefile-for-latex.html</id><summary type="html">&lt;p&gt;Finally, my search for a good Makefile for LaTeX  document writing  was ended by this &lt;a href="http://code.google.com/p/latex-makefile/"&gt;solution&lt;/a&gt;. You may have heard about &lt;a href="https://gforge.inria.fr/projects/latex-utils/"&gt;latex-makefile&lt;/a&gt; or &lt;a href="http://latex-mk.sourceforge.net/"&gt;latex-mk&lt;/a&gt; or other LaTeX makefiles. But either they are too complicated, dependent on other external programs, need to install before use or not  powerful enough to get the most jobs done. Here, this &lt;a href="http://code.google.com/p/latex-makefile/"&gt;latex-makefile&lt;/a&gt; is light-weight, self-contained, zero-dependent and powerful to deal with most cases. Simply download it, drop into the same directory with your LaTeX source file and you are ready to go. Its colorful output really makes error-checking much easier. I like it very much. Highly recommend it.&lt;/p&gt;</summary></entry><entry><title>Switch your Linux laptop display to a projector</title><link href="/switch-your-linux-laptop-display-to-a-projector.html" rel="alternate"></link><updated>2012-05-04T03:45:31-04:00</updated><author><name>jchain</name></author><id>tag:,2012-05-04:switch-your-linux-laptop-display-to-a-projector.html</id><summary type="html">&lt;p&gt;In a job interview two months ago, no matter how hard I tried I simply couldn't export the screen of my laptop running Ubuntu Linux to a projector. It was the first time that I linked a Linux computer to a projector. Luckily the interviewers were generous enough and the four people of us sat together tightly to watch the slides on my 15" laptop screen. They gave me a job offer in the end but I just hoped that I could have done a better presentation that day.&lt;/p&gt;
&lt;p&gt;I searched for a solution for that on the web. It seemed a headache for many Linux users. Finally I ran into &lt;a href="http://willem.engen.nl/projects/disper/"&gt;Disper&lt;/a&gt;. It solved my problem perfectly.&lt;/p&gt;
&lt;p&gt;Read on how to do it in more details &lt;a href="http://www.baibhav.com.np/article/6-computer-tips-a-tricks/32-projector-external-monitor-display-problem-on-ubuntu-1110-solved-.html"&gt;here&lt;/a&gt;&lt;/p&gt;</summary><category term="Linux"></category><category term="tips"></category></entry><entry><title>One tip for jhbuild when make error is like this</title><link href="/one-tip-for-jhbuild-when-make-error-is-like-this.html" rel="alternate"></link><updated>2012-03-28T21:02:43-04:00</updated><author><name>jchain</name></author><id>tag:,2012-03-28:one-tip-for-jhbuild-when-make-error-is-like-this.html</id><summary type="html">&lt;p&gt;Here is the error message I got today
*** No rule to make target &lt;code&gt;gtkcolorsel.c', needed by&lt;/code&gt;libgtk_3_la-gtkcolorsel.lo'. Stop&lt;/p&gt;
&lt;p&gt;The reason for that is because the output files from previous builds make Automake unhappy.&lt;/p&gt;
&lt;p&gt;The solution is
enter the jhbuild shell, and do: git clean -xdf&lt;/p&gt;
&lt;p&gt;More details from GTK+ IRC: automake does not like when files get moved around so you need to clean up the build tree and get it back into a pristine state&lt;/p&gt;</summary><category term="GTK"></category></entry><entry><title>Finally Gnome 3 on openSUSE</title><link href="/finally-gnome-3-on-opensuse.html" rel="alternate"></link><updated>2012-02-09T17:08:38-05:00</updated><author><name>jchain</name></author><id>tag:,2012-02-09:finally-gnome-3-on-opensuse.html</id><summary type="html">&lt;p&gt;After upgrading from openSUSE-11.4 to 12.1, I have spent two days on tweaking GNOME3 to make it
usable. Phew.&lt;/p&gt;
&lt;p&gt;Initially, GNOME3 (gnome-shell 3.2 precisely) was unable to start at all. .xsession-errors showed
that Clutter failed to start. A deeper reason was that Clutter wasn't able to find the proper nVidia
graphics driver libGL*.so. If you type&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;ldd /usr/bin/gnome-shell
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;You would notice that libGL.so.1 was pointing to nothing. That was bad.&lt;/p&gt;
&lt;p&gt;I narrowed down the culprit in my .bashrc. For some reason I have always modified LD_LIBRARY_PATH to
meet my needs. Everything worked fine until upgrade to openSUSE-12.1. I found from /etc/ld.conf.d
that the nVidia GL libraries had been installed in /usr/X11R6/lib64 and /usr/X11R6/lib which was
missed in my modified LD_LIBRARY_PATH. So the solution was to add /usr/X11R6/lib64:/usr/X11R6/lib in
the front of LD_LIBRARY_PATH. It seemed to have to be the first two in my case. YMMV. I didn't run
into the same problem on Ubuntu since the nVidia driver was installed somewhere else.&lt;/p&gt;
&lt;p&gt;OK. Gnome shell started but soon I noticed that there was some screen refresh glitches in
gnome-terminal. Every time I typed commands where the cursor was near the bottom, the screen failed
to refresh or output.  I hadn't seen it in KDE running the same program. So I guess it again was
related with Gnome-shell. A quick search on the web told me that it was due to some bugs in nVidia
driver with Clutter and  the work around was to add the following line into .bashrc&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;export CLUTTER_PAINT=disable-clipped-redraws:disable-culling
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Again I didn't run into this issue in Ubuntu.&lt;/p&gt;
&lt;p&gt;All right. Gnome-terminal worked properly. After further installs of Gnome shell extensions like
Application Menu, Places Status Indicator, and &lt;a href="http://code.google.com/p/tint2/"&gt;tint2&lt;/a&gt;, finally my
new GNOM 3 was ready for daily use.&lt;/p&gt;</summary><category term="GNOME"></category><category term="Linux"></category><category term="openSUSE"></category></entry><entry><title>Perlbrew and openSUSE</title><link href="/perlbrew-and-opensuse.html" rel="alternate"></link><updated>2012-02-05T06:08:45-05:00</updated><author><name>jchain</name></author><id>tag:,2012-02-05:perlbrew-and-opensuse.html</id><summary type="html">&lt;p&gt;I have heard about how great &lt;a href="http://perlbrew.pl/"&gt;perlbrew&lt;/a&gt; is from time to time on the web but
I have never had a chance to play with it until today. After my openSUSE was upgraded from 11.x to
12.x and system-wide Perl was upgraded from 5.12 to 5.14, my local Perl modules was broken. I think
it is a good idea to have access to multiple Perl distributions and a good management among them.
Soon I realized that it was time to give perlbrew a try. I tried to install a locally built
Perl-5.14.2 by the command&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;perlbrew install perl-5.14.2
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;But quickly it failed with the exactly the same error like
&lt;a href="http://www.gossamer-threads.com/lists/perl/porters/234587"&gt;this&lt;/a&gt;. It was about something wrong with
ODBM_File. And this problem seems specific to openSUSE. As the post link said, the solution is&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;perlbrew install perl-5.14.2 -D noextension=ODBM_File
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;This made a good build of perl-5.14.2. I further installed cpanm with perlbrew and replaced the
system-wide cpanm. I've found it a better way to install CPAN modules since by doing so cpanm will
install modules for difference versions of Perl in separate locations. For example, modules for
Perl-5.12 won't conflict with Perl-5.14. This is just what I want.&lt;/p&gt;
&lt;p&gt;Happy perlbrewing...&lt;/p&gt;</summary><category term="Perl"></category></entry><entry><title>Make apt like zypper</title><link href="/make-apt-like-zypper.html" rel="alternate"></link><updated>2012-02-01T23:43:17-05:00</updated><author><name>jchain</name></author><id>tag:,2012-02-01:make-apt-like-zypper.html</id><summary type="html">&lt;p&gt;&lt;a href="http://en.wikipedia.org/wiki/Advanced_Packaging_Tool"&gt;apt&lt;/a&gt; is one of the reasons that I like
Debian/Ubuntu, but type apt-cache search, apt-cache show, apt-get install, apt-get update, apt-get
upgrade is so verbose. To make life easier, I have stolen some ideas from
&lt;a href="http://en.wikipedia.org/wiki/ZYpp"&gt;zypper&lt;/a&gt; from OpenSUSE by adding the following lines into my
.bashrc:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;apt&lt;span class="o"&gt;()&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
 &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="o"&gt;[&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="nv"&gt;$1&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;se&amp;quot;&lt;/span&gt; &lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="k"&gt;then&lt;/span&gt;
 apt-cache search &lt;span class="nv"&gt;$2&lt;/span&gt;
 &lt;span class="k"&gt;fi&lt;/span&gt;

 &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="o"&gt;[&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="nv"&gt;$1&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;if&amp;quot;&lt;/span&gt; &lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="k"&gt;then&lt;/span&gt;
 apt-cache show &lt;span class="nv"&gt;$2&lt;/span&gt;
 &lt;span class="k"&gt;fi&lt;/span&gt;

 &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="o"&gt;[&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="nv"&gt;$1&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;up&amp;quot;&lt;/span&gt; &lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="k"&gt;then&lt;/span&gt;
 sudo apt-get update
 &lt;span class="k"&gt;fi&lt;/span&gt;

 &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="o"&gt;[&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="nv"&gt;$1&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;upgrade&amp;quot;&lt;/span&gt; &lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="k"&gt;then&lt;/span&gt;
 sudo apt-get upgrade
 &lt;span class="k"&gt;fi&lt;/span&gt;

 &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="o"&gt;[&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="nv"&gt;$1&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;in&amp;quot;&lt;/span&gt; &lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="k"&gt;then&lt;/span&gt;
 sudo apt-get install &lt;span class="nv"&gt;$2&lt;/span&gt;
 &lt;span class="k"&gt;fi&lt;/span&gt;

 &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="o"&gt;[&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="nv"&gt;$1&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;rm&amp;quot;&lt;/span&gt; &lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="k"&gt;then&lt;/span&gt;
 sudo apt-get remove &lt;span class="nv"&gt;$2&lt;/span&gt;
 &lt;span class="k"&gt;fi&lt;/span&gt;
 &lt;span class="o"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Now you can just type 'apt se', 'apt up', 'apt upgrade', 'apt in' and 'apt if' to do the similar things.&lt;/p&gt;</summary><category term="Bash"></category><category term="Linux"></category><category term="tips"></category><category term="Ubuntu"></category></entry><entry><title>tlmgr is better than those provided by Linux distribution</title><link href="/tlmgr-is-better-than-those-provided-by-linux-distribution.html" rel="alternate"></link><updated>2011-12-31T04:08:02-05:00</updated><author><name>jchain</name></author><id>tag:,2011-12-31:tlmgr-is-better-than-those-provided-by-linux-distribution.html</id><summary type="html">&lt;p&gt;Even though many Linux distributions have provided TeX packages, I still like  &lt;a href="http://www.tug.org/texlive/tlmgr.html"&gt;tlmgr&lt;/a&gt; to manage everything. It is like apt-get but just for TeX Live. Management and configuration become much more convenient.&lt;/p&gt;</summary><category term="Latex"></category></entry><entry><title>Latex \cite{} tolerate white spaces?</title><link href="/latex-cite-tolerate-white-spaces.html" rel="alternate"></link><updated>2011-12-20T21:07:34-05:00</updated><author><name>jchain</name></author><id>tag:,2011-12-20:latex-cite-tolerate-white-spaces.html</id><summary type="html">&lt;p&gt;To make latex/bibtex tolerate the white spaces in your long \cite{foooooo, baaaaaar, loooooooog},
use package 'cite'&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;\usepackage{cite}
&lt;/pre&gt;&lt;/div&gt;</summary><category term="Latex"></category><category term="tips"></category></entry><entry><title>Yet another rename</title><link href="/yet-another-rename.html" rel="alternate"></link><updated>2011-12-17T18:41:51-05:00</updated><author><name>jchain</name></author><id>tag:,2011-12-17:yet-another-rename.html</id><summary type="html">&lt;p&gt;I had many randomly named files and directories under my working project. Today I wanted to organize them in a more consistent naming convention. So I needed a file rename tool. Even though Linux base installation has a command 'rename', I soon found this Perl app &lt;a href="http://search.cpan.org/~pederst/rename-1.8/bin/rename.PL"&gt;rename&lt;/a&gt; is better thanks to Perl's powerful regex. Plus, its dry-run option is also a very good idea.&lt;/p&gt;</summary><category term="Perl"></category><category term="Productivity"></category><category term="tips"></category></entry><entry><title>Git format-patch</title><link href="/git-format-patch.html" rel="alternate"></link><updated>2011-12-15T17:52:40-05:00</updated><author><name>jchain</name></author><id>tag:,2011-12-15:git-format-patch.html</id><summary type="html">&lt;p&gt;&lt;a href="http://stackoverflow.com/questions/616556/how-do-you-squash-commits-into-one-patch-with-git-format-patch"&gt;http://stackoverflow.com/questions/616556/how-do-you-squash-commits-into-one-patch-with-git-format-patch&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Check the link above when you want to combine several commits into one patch. It might be needed
when you want to submit all your local changes into one changeset to the upstream.&lt;/p&gt;</summary><category term="Git"></category></entry><entry><title>Indent only XML file</title><link href="/indent-only-xml-file.html" rel="alternate"></link><updated>2011-12-15T16:48:24-05:00</updated><author><name>jchain</name></author><id>tag:,2011-12-15:indent-only-xml-file.html</id><summary type="html">&lt;p&gt;Recently I have worked on editing XML files in Vim. These XML files are the documents of a software in DocBook style. Since they are maintained manually, the indentation is badly formatted. So before getting deeper, the very first thing to do was to re-indent the files. It turned out from a short Google search that the tools to get the job done could be:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="http://ku1ik.com/2011/09/08/formatting-xml-in-vim-with-indent-command.html"&gt;xmllint&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="http://xmlindent.sourceforge.net/"&gt;xmlindent&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="http://www.kitebird.com/software/xmlformat/xmlformat.html"&gt;xmlformat&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="http://www.qualitybrain.com/?p=37"&gt;tidy&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;xmllint, xmlindent and tidy seem to remove the empty lines I left intentionally, which is bad since I want to keep them for readability. xmlformat seems to provide such options to add blank lines but I didn't have time to look into. So finally I only used 'gg=G' in Vim to format the XML file. This operation was only to indent the file without combining or removing any blank lines. That was just what I needed. &lt;/p&gt;</summary><category term="Vim"></category><category term="XML"></category></entry><entry><title>Quick print: a little trick for gdb setting</title><link href="/quick-print-a-little-trick-for-gdb-setting.html" rel="alternate"></link><updated>2011-12-02T23:10:49-05:00</updated><author><name>jchain</name></author><id>tag:,2011-12-02:quick-print-a-little-trick-for-gdb-setting.html</id><summary type="html">&lt;p&gt;Today I would like to share a little trick that I have adapted and used for a while. It is for
&lt;a href="en.wikipedia.org/wiki/GNU_Debugger"&gt;gdb&lt;/a&gt;. Before your reading the rest of the post, and if you have
no idea about the customization of gdb, please read
&lt;a href="http://zandyware.wordpress.com/2011/05/25/a-must-read-for-every-gdb-learner/"&gt;here&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;If you use gdb frequently, chances are you have to type the command 'print' or 'p' to examine the
value of variable many many times. A common case is like this: you type 'p foo' to see the value of
'foo'. It turns out that 'foo' is a pointer, and you have to type 'p *foo' again in the commandline.
Or you have to type 'ptype foo' to find out the type definition of 'foo'. Tedious. This small piece
of gdb macro to make your life easier. Every time you type 'p foo', you just scroll up the history
and type '1', 'p foo 1' shows the dereferenced value, or typing '2' gives you the type definition of
'foo'. Copy and paste into your ~/.gdbinit &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;define&lt;/span&gt; &lt;span class="n"&gt;p&lt;/span&gt;
 &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="err"&gt;$&lt;/span&gt;&lt;span class="n"&gt;argc&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;
   &lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="err"&gt;$&lt;/span&gt;&lt;span class="n"&gt;arg0&lt;/span&gt;
 &lt;span class="k"&gt;else&lt;/span&gt;
   &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="err"&gt;$&lt;/span&gt;&lt;span class="n"&gt;arg1&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;
     &lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="err"&gt;$&lt;/span&gt;&lt;span class="n"&gt;arg0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
   &lt;span class="k"&gt;else&lt;/span&gt;
     &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="err"&gt;$&lt;/span&gt;&lt;span class="n"&gt;arg1&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;
       &lt;span class="n"&gt;ptype&lt;/span&gt; &lt;span class="err"&gt;$&lt;/span&gt;&lt;span class="n"&gt;arg0&lt;/span&gt;
     &lt;span class="n"&gt;end&lt;/span&gt;
   &lt;span class="n"&gt;end&lt;/span&gt;
 &lt;span class="n"&gt;end&lt;/span&gt;
&lt;span class="n"&gt;end&lt;/span&gt;
&lt;span class="n"&gt;document&lt;/span&gt; &lt;span class="n"&gt;p&lt;/span&gt;
   &lt;span class="n"&gt;Print&lt;/span&gt; &lt;span class="n"&gt;the&lt;/span&gt; &lt;span class="n"&gt;variable&lt;/span&gt; &lt;span class="n"&gt;information&lt;/span&gt; &lt;span class="n"&gt;quickly&lt;/span&gt;
&lt;span class="n"&gt;end&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;</summary><category term="GDB"></category><category term="Linux"></category></entry><entry><title>Don't show the hidden files in GTK+ application open file dialog</title><link href="/dont-show-the-hidden-files-in-gtk-application-open-file-dialog.html" rel="alternate"></link><updated>2011-11-18T07:55:05-05:00</updated><author><name>jchain</name></author><id>tag:,2011-11-18:dont-show-the-hidden-files-in-gtk-application-open-file-dialog.html</id><summary type="html">&lt;p&gt;It is quite annoying when you open a file selection dialog in a typical GTK+ application a pile of hidden files and directories occupy the window. &lt;strong&gt;Solution:&lt;/strong&gt; edit ~/.config/gtk-2.0/gtkfilechooser.ini to disable the option 'ShowHidden'&lt;/p&gt;</summary><category term="GNOME"></category><category term="GTK"></category><category term="Linux"></category></entry><entry><title>Arrow keys don't work properly in Totalview Debugger</title><link href="/arrow-keys-dont-work-properly-in-totalview-debugger.html" rel="alternate"></link><updated>2011-11-14T22:21:23-05:00</updated><author><name>jchain</name></author><id>tag:,2011-11-14:arrow-keys-dont-work-properly-in-totalview-debugger.html</id><summary type="html">&lt;p&gt;Totalview is a very powerful debugger for C/C++, Fortran languages, especially for debugging high performance programs. In this commandline interface(a new xterm window) no matter how hard I tried my arrow 'Up' key entered [[A char and 'Down' keys gave [[B char. What I really wanted was the 'history-previous' and 'history-next' in common Bash terminals. This type of malfunction really sucks when you debug a program through CLI. I thought at the beginning that it was due to curtain 'mismatch' between different 'TERM's or xterm mis-configuration. Wired, arrow keys worked fine if I myself started xterm. I have tried many so-called key remap configurations for xterm, rxvt or vt100/102. None of them worked.&lt;/p&gt;
&lt;p&gt;Finally I realized that Totalview heavily relies on TCL. Its CLI is also built from TCL. So when I ran 'tclsh' in my Gnome terminal, pressing arrow keys misbehaved the exactly same way as in Totalview CLI. Therefore I continued the solution search online until I found &lt;a href="http://utopia.knoware.nl/~hlub/rlwrap/"&gt;http://utopia.knoware.nl/~hlub/rlwrap/&lt;/a&gt;. Simply run 'rlwrap tclsh' and 'rlwrap tv8cli' and the arrow keys worked like a charm.&lt;/p&gt;
&lt;p&gt;I further aliased 'tv8cli' as 'rlwrap tv8cli'. But I still couldn't make it work in Totalview's GUI xterm CLI. Is there a way to do that?&lt;/p&gt;</summary><category term="Debug"></category><category term="tips"></category><category term="Totalview"></category></entry><entry><title>Midnight commander's new user data directory</title><link href="/midnight-commanders-new-user-data-directory.html" rel="alternate"></link><updated>2011-11-09T22:00:24-05:00</updated><author><name>jchain</name></author><id>tag:,2011-11-09:midnight-commanders-new-user-data-directory.html</id><summary type="html">&lt;p&gt;It seems that the user-specific data/config directory of midnight commander 4.8.x is under
$HOME/.local/share/mc and $HOME/.config/mc. However the previous version(4.7.x) is looking for
$HOME/.mc. You can verify that by typing&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;mc -F
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Personally I don't like this change since I prefer to a single directory for the convenience of
storage and backup of my config files. Your skin setting probably take no effect after upgrading to
4.8.x. Place your skin files to &lt;code&gt;$HOME/.local/share/mc/skins&lt;/code&gt; and modify &lt;code&gt;$HOME/.config/mc/ini&lt;/code&gt;&lt;/p&gt;</summary><category term="Linux"></category><category term="tips"></category></entry><entry><title>Gnuplot: how to skip the first line in the data file</title><link href="/gnuplot-how-to-skip-the-first-line-in-the-data-file.html" rel="alternate"></link><updated>2011-11-09T04:23:38-05:00</updated><author><name>jchain</name></author><id>tag:,2011-11-09:gnuplot-how-to-skip-the-first-line-in-the-data-file.html</id><summary type="html">&lt;p&gt;It is very likely that the data file you are going to visualize has a one line header at the first
line. Use 'every' keyword to skip the first line like this.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;plot &amp;quot;foo.dat&amp;quot; every ::1 using 1:2 with lines
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Similarly you can skip 2 or 3 or whatever lines using 'every'&lt;/p&gt;</summary><category term="Gnuplot"></category><category term="tips"></category></entry><entry><title>git: remove a file from version control but not delete it from disk</title><link href="/git-remove-a-file-from-version-control-but-not-delete-it-from-disk.html" rel="alternate"></link><updated>2011-11-02T20:38:28-04:00</updated><author><name>jchain</name></author><id>tag:,2011-11-02:git-remove-a-file-from-version-control-but-not-delete-it-from-disk.html</id><summary type="html">&lt;p&gt;Today's tip has only one line&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;git rm --cached foo.bar
&lt;/pre&gt;&lt;/div&gt;</summary><category term="Git"></category></entry><entry><title>Octave plot legend fontsize?</title><link href="/octave-plot-legend-fontsize.html" rel="alternate"></link><updated>2011-10-21T06:50:36-04:00</updated><author><name>jchain</name></author><id>tag:,2011-10-21:octave-plot-legend-fontsize.html</id><summary type="html">&lt;p&gt;I wanted to create a line plot in Octave today and saved it as a eps file. But no matter how hard I tried I simply couldn't change the font size of the plot legend. It was too small in my document. There is already much discussion about it on the web. No tricks worked for me. Finally I realized that what I really cared about was the font size in file output not the gnuplot screen output. So I just tried '&lt;strong&gt;print('foo.eps','-depsc','-F:14')&lt;/strong&gt;'. The option '-F:14' set the default print fontsize to 14. It worked so far so good.&lt;/p&gt;</summary><category term="Octave"></category></entry><entry><title>GNU Parallell, make best use of your multicore computer</title><link href="/gnu-parallell-make-best-use-of-your-multicore-computer.html" rel="alternate"></link><updated>2011-10-15T00:13:16-04:00</updated><author><name>jchain</name></author><id>tag:,2011-10-15:gnu-parallell-make-best-use-of-your-multicore-computer.html</id><summary type="html">&lt;p&gt;In my research work, I have to run many many times of the same program with different parameters.
I wrote bash files to make my life easier. But single process of bash is very slow considering
I have a decent computer with 24 cpu cores. My old way to make better use of multicore CPU was to
split my jobs into several separate bash files and run them simultaneously. You can imagine that it
is far from productive when editing these files. They contain overwhelmingly repeated text.&lt;/p&gt;
&lt;p&gt;GNU &lt;a href="http://www.gnu.org/s/parallel"&gt;parallel&lt;/a&gt; comes to rescue. I first ran into this post
&lt;a href="http://pebblesinthesand.wordpress.com/2008/05/22/a-srcipt-for-running-processes-in-parallel-in-bash/"&gt;http://pebblesinthesand.wordpress.com/2008/05/22/a-srcipt-for-running-processes-in-parallel-in-bash/&lt;/a&gt;.
But I quickly found GNU parallel was a better choice. Fully loaded with detailed documentation.
Plus, it was written in Perl. As you may know, I'm a Perl fan:-). Now my batch file has become like
this:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;seq 1 100 | parallel -j 20 single_run.sh {}
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Voilà!&lt;/p&gt;</summary><category term="Linux"></category><category term="tips"></category></entry><entry><title>Initial impressions of Ubuntu 11.10 Unity and Gnome3</title><link href="/initial-impressions-of-ubuntu-11-10-unity-and-gnome3.html" rel="alternate"></link><updated>2011-10-07T21:35:46-04:00</updated><author><name>jchain</name></author><id>tag:,2011-10-07:initial-impressions-of-ubuntu-11-10-unity-and-gnome3.html</id><summary type="html">&lt;p&gt;As the release of Ubuntu 11.04 is approaching, I took a bold move to upgrade my Ubuntu 11.04 to 11.10 last night. Maybe not that bold, since the Ubuntu 11.10 is supposed to be stable enough at this moment. I played around with Unity and Gnome3 each for a while and finally chose Unity as my default desktop manager.&lt;/p&gt;
&lt;p&gt;At the very beginning, my wireless didn't work. It turned out that the wireless adapter drive was buggy with Linux kernel 3.x.x. After switching back to 2.8.x, wireless connection was alive. Both Unity and Gnome3 have impressive visual efftects at first glance. But after a while, especially in term of the usability, I would prefer Unity. Why?&lt;/p&gt;
&lt;p&gt;I like the title bar/top panel in Unity very much. It combines the functionality of the conventional window title bar and the top panel. Sure, it mimics Mac OSX but this feature save a lot of laptop screen real estate. While in Gnome3, a time applet seemingly takes up the whole top panel and you can't place app shortcuts into it rendering itself less useful.&lt;/p&gt;
&lt;p&gt;Both desktop managers have dropped 'Window List' at the bottom. I have to say I need that back badly. I feel very uncomfortable without it showing. I have no idea how to switch between windows quickly if you have opened 10+ windows. 'Alt+Tab' is not the right solution. I even think of switching to tiling window manager like wmii, xmonad. Luckily someone suggests &lt;a href="http://code.google.com/p/tint2/"&gt;tint2&lt;/a&gt; as replacement. I will give it a try immediately when back home.&lt;/p&gt;</summary><category term="Linux"></category></entry><entry><title>Use notify-send to notify the finish of long run process</title><link href="/use-notify-send-to-notify-the-finish-of-long-run-process.html" rel="alternate"></link><updated>2011-08-25T20:21:46-04:00</updated><author><name>jchain</name></author><id>tag:,2011-08-25:use-notify-send-to-notify-the-finish-of-long-run-process.html</id><summary type="html">&lt;p&gt;This Linux executable is part of the package 'libnotify'. With it you can notify the finish of long run process, like&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;./LongRunProcess | notify-send Done "LongRunProcess is done"&lt;/p&gt;
&lt;/blockquote&gt;</summary><category term="Linux"></category><category term="tips"></category></entry><entry><title>Debugging memory violation in wxgtk3 with valgrind</title><link href="/debugging-memory-violation-in-wxgtk3-with-valgrind.html" rel="alternate"></link><updated>2011-08-21T16:30:39-04:00</updated><author><name>jchain</name></author><id>tag:,2011-08-21:debugging-memory-violation-in-wxgtk3-with-valgrind.html</id><summary type="html">&lt;p&gt;wxgtk3 is under active development. Today I ran into a &lt;strong&gt;SIGABRT&lt;/strong&gt; signal when debugging samples/image. The error message is like this:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;&lt;em&gt; glibc detected &lt;/em&gt;&lt;/strong&gt; ./image: malloc(): smallbin double linked list corrupted: 0x0000000000c93180 ***
======= Backtrace: =========
/lib64/libc.so.6(+0x73226)[0x7f580b58f226]
/lib64/libc.so.6(+0x758cf)[0x7f580b5918cf]
/lib64/libc.so.6(__libc_malloc+0x79)[0x7f580b593aa9]
/usr/lib64/libstdc++.so.6(_Znwm+0x1d)[0x7f580bd6d3dd]
/usr/lib64/libstdc++.so.6(_Znam+0x9)[0x7f580bd6d4f9]
./image[0x4a6d2c]
./image[0x4a8d7c]
./image[0x4ab21f]
./image[0x4aaeb6]&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;What is "&lt;em&gt;malloc(): smallbin double linked list corrupted&lt;/em&gt;" error? I had no clue. I loaded the program in gdb and saw this error happens when a specific line of code having 'new' operator was hit. It should be some memory allocation violation. I searched it in Google. The returned results showed many bug reports containing this error. Interestingly, a good number of the follow-up replies said the bug was not reproducible and suggested the original  bug reporter submit valgrind log but few did that so these bug reports were marked as invalid.&lt;/p&gt;
&lt;p&gt;I guessed most bug reporters were just common users who were not familiar with valgrind. Anyway, the search results suggested me run valgrind to get more information about the memory violation. Luckly, I played with it several month ago and made a not-bad &lt;a href="http://zandyware.wordpress.com/2011/01/21/share-my-newly-created-valgrind-wxgtk-2-9-1-suppression-file/"&gt;suppression file&lt;/a&gt; customized with wxgtk. Again I ran valgrind with the command like this:&lt;/p&gt;
&lt;p&gt;G_SLICE=always-malloc G_DEBUG=gc-friendly valgrind --leak-check=yes --suppressions=./wx.supp --log-file=valgrind.log ./image&lt;/p&gt;
&lt;p&gt;Valgrind immediately tracked down where the real problem was. The log looked like this&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;==17645== Memcheck, a memory error detector
==17645== Copyright (C) 2002-2010, and GNU GPL'd, by Julian Seward et al.
==17645== Using Valgrind-3.6.1 and LibVEX; rerun with -h for copyright info
==17645== Command: ./image
==17645== Parent PID: 28951
==17645==
==17645== Source and destination overlap in memcpy(0xe004860, 0xe003430, 5600)
==17645==    at 0x4C289A6: memcpy (mc_replace_strmem.c:635)
==17645==    by 0x447DD0: wxBitmap::CreateFromImageAsPixmap(wxImage const&amp;amp;, int) (bitmap_gtk3.cpp:500)
==17645==    by 0x447910: wxBitmap::CreateFromImage(wxImage const&amp;amp;, int) (bitmap_gtk3.cpp:383)
==17645==    by 0x425694: wxBitmap::wxBitmap(wxImage const&amp;amp;, int) (bitmap.h:72)
==17645==    by 0x42DDEA: MyCanvas::MyCanvas(wxWindow&lt;em&gt;, int, wxPoint const&amp;amp;, wxSize const&amp;amp;) (canvas.cpp:199)
==17645==    by 0x41EE7F: MyFrame::MyFrame() (image.cpp:678)
==17645==    by 0x420B23: MyApp::OnInit() (image.cpp:878)
==17645==    by 0x424A22: wxAppConsoleBase::CallOnInit() (app.h:92)
==17645==    by 0x611002: wxEntry(int&amp;amp;, wchar_t&lt;strong&gt;) (init.cpp:456)
==17645==    by 0x6110F1: wxEntry(int&amp;amp;, char&lt;/strong&gt;) (init.cpp:484)
==17645==    by 0x420A84: main (image.cpp:869)
==17645==
==17645== Invalid read of size 8
==17645==    at 0x4C28B2C: memcpy (mc_replace_strmem.c:635)
==17645==    by 0x447DD0: wxBitmap::CreateFromImageAsPixmap(wxImage const&amp;amp;, int) (bitmap_gtk3.cpp:500)
==17645==    by 0x447910: wxBitmap::CreateFromImage(wxImage const&amp;amp;, int) (bitmap_gtk3.cpp:383)
==17645==    by 0x425694: wxBitmap::wxBitmap(wxImage const&amp;amp;, int) (bitmap.h:72)
==17645==    by 0x42DDEA: MyCanvas::MyCanvas(wxWindow&lt;/em&gt;, int, wxPoint const&amp;amp;, wxSize const&amp;amp;) (canvas.cpp:199)
==17645==    by 0x41EE7F: MyFrame::MyFrame() (image.cpp:678)
==17645==    by 0x420B23: MyApp::OnInit() (image.cpp:878)
==17645==    by 0x424A22: wxAppConsoleBase::CallOnInit() (app.h:92)
==17645==    by 0x611002: wxEntry(int&amp;amp;, wchar_t&lt;strong&gt;) (init.cpp:456)
==17645==    by 0x6110F1: wxEntry(int&amp;amp;, char&lt;/strong&gt;) (init.cpp:484)
==17645==    by 0x420A84: main (image.cpp:869)&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;It turned out that memcpy() at the line 500 in bitmap_gtk3.cpp manipulated overlapping memory. That was the actual culprit. Valgrind even showed the call backtrace to help you to reproduce the bug. Awesome.&lt;/p&gt;
&lt;p&gt;I hope this blog entry help you to use Valgrind to locate the bug and fix memory error quickly.&lt;/p&gt;</summary><category term="C/C++"></category><category term="GDB"></category><category term="Valgrind"></category><category term="wxWidgets"></category></entry><entry><title>GDB: How to set a watchpoint to watch the change of variable</title><link href="/gdb-how-to-set-a-watchpoint-to-watch-the-change-of-variable.html" rel="alternate"></link><updated>2011-08-11T01:32:32-04:00</updated><author><name>jchain</name></author><id>tag:,2011-08-11:gdb-how-to-set-a-watchpoint-to-watch-the-change-of-variable.html</id><summary type="html">&lt;p&gt;Step 1: Print the address of the variable you are going to watch.
&lt;code&gt;p *your_variable&lt;/code&gt;
(Suppose the address is 0x12345678
Step 2: Set watchpoint
&lt;code&gt;watch *0x12345678&lt;/code&gt;&lt;/p&gt;</summary><category term="GDB"></category><category term="Linux"></category></entry><entry><title>My favorite Gnome terminal font is fixedsys-excelsior</title><link href="/my-favorite-gnome-terminal-font-is-fixedsys-excelsior.html" rel="alternate"></link><updated>2011-08-05T04:57:39-04:00</updated><author><name>jchain</name></author><id>tag:,2011-08-05:my-favorite-gnome-terminal-font-is-fixedsys-excelsior.html</id><summary type="html">&lt;p&gt;Finding a good monospaced font for Gnome terminal was used to be my big wish. I have tried bitstream
mono, droid sans mono, inconsola. None of them was satisfactory in Gnome terminal with dark
background(much better in white background but I don't like white background). Finally, my heart has
been settled down with &lt;a href="http://www.fixedsysexcelsior.com/"&gt;fixedsys-excelsior&lt;/a&gt;. It just looks very
comfortable with my black background.&lt;/p&gt;</summary><category term="Linux"></category><category term="tips"></category></entry><entry><title>Use command 'reset' to reset your terminal display when output is garbled.</title><link href="/use-command-reset-to-reset-your-terminal-display-when-output-is-garbled.html" rel="alternate"></link><updated>2011-07-26T21:03:49-04:00</updated><author><name>jchain</name></author><id>tag:,2011-07-26:use-command-reset-to-reset-your-terminal-display-when-output-is-garbled.html</id><summary type="html">&lt;p&gt;I feel shamed that I haven't found this simple command for a decade. Previously, I just closed the window or the terminal and re-opened. But this 'reset' command is the right way to do. Try it next time when your terminal display looks funny and out of control.&lt;/p&gt;</summary><category term="Linux"></category><category term="tips"></category></entry><entry><title>Understand gcc -L option and library search order</title><link href="/understand-gcc-l-option-and-library-search-order.html" rel="alternate"></link><updated>2011-07-26T16:27:12-04:00</updated><author><name>jchain</name></author><id>tag:,2011-07-26:understand-gcc-l-option-and-library-search-order.html</id><summary type="html">&lt;p&gt;In my project of porting wxGTK from GTK+2 to GTK+3, I built GTK+3 from scratch and installed it at a non-standard location. One of the painful things was that the gcc linker complained about the unknown references to glib or functions. The reason was that I had two parallel glib-2.0.so, one was the system default at /usr/lib64, the other was from my custom build. In the makefile, the gcc linker was given three -L options, something like&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;-L/usr/lib64 blah blah blah -L/home/foo/gtk3/libs blah blah blah -L/usr/lib64&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Apparently, one of two options -L/usr/lib64 took higher priority in the library search order so that my custom glib-2.0.so was not found. But which one was the culprit? I did a little experiment and it turned out that the first masked my custom GTK+3 lib path. So the conclusion is if you have several -L&lt;dir&gt; options the library search order will be 'first-come-first-search'.&lt;/p&gt;
&lt;p&gt;The next question is how to solve it. In the makefile, linker flags were specified by something like this:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;$(CXX) blah blah blah $(LDFLAGS) $(EXTRALIBS_FOR_GUI) $(LIBS)&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;In my case, the default setting for $(LDFLAGS) is '-L/usr/lib64', $(EXTRALIBS_FOR_GUI)='-L/home/foo/gtk3/libs' and $(LIBS)='-L/usr/lib64'. Since the makefile was generated by configure which is effected by the environmental variables such as LDFLAGS, doing the following solved my problem:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;export LDFLAGS='-L/home/foo/gtk3/libs'&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;re-run configure&lt;/p&gt;
&lt;p&gt;Your mileage may vary. But hope this post can give some hints for your own problems especially if you use parallel libraries.&lt;/p&gt;</summary><category term="C/C++"></category><category term="GCC"></category><category term="tips"></category><category term="wx"></category><category term="wxWidgets"></category></entry><entry><title>Nasty bug lurked in the implicite function</title><link href="/nasty-bug-lurked-in-the-implicite-function.html" rel="alternate"></link><updated>2011-06-28T18:16:51-04:00</updated><author><name>jchain</name></author><id>tag:,2011-06-28:nasty-bug-lurked-in-the-implicite-function.html</id><summary type="html">&lt;p&gt;I fixed a bug in C code today and it was so nasty that I think it is worth a blog post so that I can keep that in mind.&lt;/p&gt;
&lt;p&gt;I called a function which allocated a chunk of memory with malloc() and returned a pointer pointing to that memory. The wired thing is the returned address will change so that the caller get an invalid address(out of the bound of memory). More precisely speaking, the most significant bit changes from 0x7fff.... to 0xffff.... I really had no clue about why it would go like that. I even tried to disassemble the C code to check what was wrong. It turned out that the return address in the callee was correct but after returning the address to the caller, the value changed. I wrote another toy program to verify everything and finally I nailed down the reason. The callee function is defined in another C file and it looks like an implicit function to the caller. Somehow, this implicit function changed the address during the call. The compilation was fine even though GCC threw a warning about it. I ignored it at the first place but eventually this warning bit me. After adding necessary definitions in the header files. My program worked like a charm.&lt;/p&gt;
&lt;p&gt;The lesson I learned: don't ignore the warning messages of compiler.&lt;/p&gt;</summary><category term="C/C++"></category><category term="GCC"></category><category term="Linux"></category></entry><entry><title>wxGTK with gtk+3.0 preview</title><link href="/wxgtk-with-gtk3-0-preview.html" rel="alternate"></link><updated>2011-06-26T01:26:00-04:00</updated><author><name>jchain</name></author><id>tag:,2011-06-26:wxgtk-with-gtk3-0-preview.html</id><summary type="html">&lt;p&gt;After about one month porting work on wxWidgets with GTK+3.0, we finally made the wx-gtk+3.0 build possible. The wx/samples/minimal is working as shown below even though the status bar doesn't show up. For preview purpose of course.
&lt;a href="http://zandyware.files.wordpress.com/2011/06/wxgtk3_minimal.png"&gt;&lt;img alt="" src="http://zandyware.files.wordpress.com/2011/06/wxgtk3_minimal.png" /&gt;&lt;/a&gt;
Work will continue on porting drawing code with Cairo as what gtk+3.0 does by default. More samples will be built and tested. Stay tune.&lt;/p&gt;</summary><category term="C/C++"></category><category term="GTK"></category><category term="Linux"></category><category term="wxWidgets"></category></entry><entry><title>Check syntax error of latex file with lacheck</title><link href="/check-syntax-error-of-latex-file-with-lacheck.html" rel="alternate"></link><updated>2011-06-01T16:08:02-04:00</updated><author><name>jchain</name></author><id>tag:,2011-06-01:check-syntax-error-of-latex-file-with-lacheck.html</id><summary type="html">&lt;p&gt;Before you make a long wait compilation of your latex file, you can use &lt;strong&gt;lacheck&lt;/strong&gt; to check the syntax error first. lacheck is probably already packaged within your tex installation.&lt;/p&gt;</summary><category term="Latex"></category><category term="tips"></category></entry><entry><title>Migrating from svn to git</title><link href="/migrating-from-svn-to-git.html" rel="alternate"></link><updated>2011-06-01T15:46:51-04:00</updated><author><name>jchain</name></author><id>tag:,2011-06-01:migrating-from-svn-to-git.html</id><summary type="html">&lt;p&gt;Our project is consider migrating from subversion to git. I'm quite happy that git can totally serve
as a svn client. You can use git to branch and merge locally and commit into svn to let other
developers know about your changes. It sounds more flexible than centralized repository like CVS and
Subversion.&lt;/p&gt;
&lt;p&gt;After getting my hands dirty with git for a while, I'm tempted to migrate my personal repository
from subversion to git too. Even though git is a decentralized version control system but people
still need a remote backup hosting. This is where &lt;a href="http://github.com"&gt;github.com&lt;/a&gt; sits in. Since
I want my repository kept private, &lt;a href="http://github.com"&gt;github.com&lt;/a&gt; is not my list. Also I wish free
git hosting can offer at least 2gb space. &lt;a href="http://bettercodes.org"&gt;Bettercodes.org&lt;/a&gt; was my previous
choice but its host is located in Ireland, the connection speed is very slow and its UI is not very
easy to use. Today I found &lt;a href="http://assembla.com"&gt;assembla.com&lt;/a&gt; located in United States offers 2gb
free git hosting. I gave it a short and so far so good. The access  is very fast. It supports https
connection, much safer than bettercodes.org and my current free svn hosting.&lt;/p&gt;
&lt;p&gt;I found this post is very helpful for svn user switching to git.
&lt;a href="http://www.fnokd.com/2008/08/20/mirroring-svn-repository-to-github/"&gt;http://www.fnokd.com/2008/08/20/mirroring-svn-repository-to-github/&lt;/a&gt;&lt;/p&gt;</summary><category term="Git"></category><category term="svn"></category></entry><entry><title>A must read for every GDB learner</title><link href="/a-must-read-for-every-gdb-learner.html" rel="alternate"></link><updated>2011-05-25T22:05:33-04:00</updated><author><name>jchain</name></author><id>tag:,2011-05-25:a-must-read-for-every-gdb-learner.html</id><summary type="html">&lt;p&gt;Want to customize your GDB to make it more productive? Read this great article &lt;a href="http://www.ibm.com/developerworks/aix/library/au-gdb.html"&gt;GNU Project Debugger: More fun with GDB &lt;/a&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Programmers take note: If you want to create great software, then add the ability to program macros, allowing your community of users to be able to enhance your tool to suit their own tastes.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;I can't agree more&lt;/p&gt;</summary><category term="C/C++"></category><category term="GDB"></category><category term="Linux"></category></entry><entry><title>Following Google's C++ coding style is a good practice.</title><link href="/following-googles-c-coding-style-is-a-good-practice.html" rel="alternate"></link><updated>2011-05-22T19:07:15-04:00</updated><author><name>jchain</name></author><id>tag:,2011-05-22:following-googles-c-coding-style-is-a-good-practice.html</id><summary type="html">&lt;p&gt;Following Google's C++ coding &lt;a href="http://google-styleguide.googlecode.com/svn/trunk/cppguide.xml"&gt;style&lt;/a&gt; is a good practice. Google even open-sourced its coding style checker &lt;a href="http://google-styleguide.googlecode.com/svn/trunk/cpplint/cpplint.py"&gt;cpplint.py&lt;/a&gt;. The suggestion of using const as often as possible is especially a good one. Although there are many coding styles available on the web, following them strictly without a tool won't last long in my real case. I particularly appreciate the public release of cpplint.py. A uniform coding style can finally be seen in our team.&lt;/p&gt;</summary><category term="C++"></category><category term="Tools"></category></entry><entry><title>Quick tip: batch download with wget</title><link href="/quick-tip-batch-download-with-wget.html" rel="alternate"></link><updated>2011-05-22T18:48:09-04:00</updated><author><name>jchain</name></author><id>tag:,2011-05-22:quick-tip-batch-download-with-wget.html</id><summary type="html">&lt;p&gt;Actually, the tip is from here &lt;a href="http://linux.byexamples.com/archives/4/performs-a-batch-download-using-wget/"&gt;http://linux.byexamples.com/archives/4/performs-a-batch-download-using-wget/&lt;/a&gt;&lt;/p&gt;</summary><category term="tips"></category></entry><entry><title>Automated Linux GUI testing tools</title><link href="/automated-linux-gui-testing-tools.html" rel="alternate"></link><updated>2011-05-17T06:17:31-04:00</updated><author><name>jchain</name></author><id>tag:,2011-05-17:automated-linux-gui-testing-tools.html</id><summary type="html">&lt;p&gt;I was involved in a tedious GUI testing by hand this week. To make my life easier, I researched online some automated GUI testing framework in this weekend. I quickly spotted four opensource tools: &lt;a href="https://fedorahosted.org/dogtail/"&gt;dogtail&lt;/a&gt;, &lt;a href="http://medsphere.org/community/project/strongwind"&gt;strongwind&lt;/a&gt;, &lt;a href="http://ldtp.freedesktop.org/wiki/"&gt;ldtp&lt;/a&gt; and &lt;a href="http://en.wikipedia.org/wiki/Xnee"&gt;xnee&lt;/a&gt;. After playing around with each of them for a while, I finally picked ldtp as my first choice since it is most active maintained and mature. Moreover, &lt;a href="http://mago.ubuntu.com/"&gt;mago&lt;/a&gt; makes life even easier.&lt;/p&gt;</summary><category term="Linux"></category><category term="Testing"></category><category term="Tools"></category></entry><entry><title>Userful command: scan local ports</title><link href="/userful-command-scan-local-ports.html" rel="alternate"></link><updated>2011-05-17T06:03:15-04:00</updated><author><name>jchain</name></author><id>tag:,2011-05-17:userful-command-scan-local-ports.html</id><summary type="html">&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;netstat -antuwp | egrep &amp;quot;(^[^t])|(^tcp.*LISTEN)&amp;quot;
&lt;/pre&gt;&lt;/div&gt;</summary></entry><entry><title>Tip: switch from GDB TUI and plain mode</title><link href="/tip-switch-from-gdb-tui-and-plain-mode.html" rel="alternate"></link><updated>2011-05-14T07:01:31-04:00</updated><author><name>jchain</name></author><id>tag:,2011-05-14:tip-switch-from-gdb-tui-and-plain-mode.html</id><summary type="html">&lt;p&gt;Try the Ctrl-X A shortcut in GDB.&lt;/p&gt;</summary><category term="GDB"></category><category term="tips"></category></entry><entry><title>GCC-4.5.0 users, upgrade to 4.5.2 or newer</title><link href="/gcc-4-5-0-users-upgrade-to-4-5-2-or-newer.html" rel="alternate"></link><updated>2011-05-14T06:56:58-04:00</updated><author><name>jchain</name></author><id>tag:,2011-05-14:gcc-4-5-0-users-upgrade-to-4-5-2-or-newer.html</id><summary type="html">&lt;p&gt;I'm debugging a complicated C++ program this week. It used a lot of STL containers, such as
stl::map. To print the content of stl::map in GDB-7.x with Python&lt;a href="http://sourceware.org/gdb/wiki/STLSupport"&gt;
pretty-printing&lt;/a&gt; enabled. I got error message like
&lt;a href="http://gcc.gnu.org/ml/libstdc++/2010-06/msg00128.html"&gt;this&lt;/a&gt;. My original thought was it might be
a bug in GDB, so I upgraded it to the latest version. But the error remained. Without
pretty-printing, debugging C++ program is really a PITA. So I had to stop my work at hand and
searched for solution online. After I read this &lt;a href="http://gcc.gnu.org/bugzilla/show_bug.cgi?id=44645"&gt;bug report&lt;/a&gt;, I realised that it was due to the bug in
GCC. I did a simple test as mentioned in the bug report and found out that program compiled with
GCC-4.5.0 would mess up the pretty-printing in GDB. After installing the lastest GCC-4.5.3,
everything was OK.&lt;/p&gt;</summary><category term="C++"></category><category term="GCC"></category><category term="GDB"></category><category term="Linux"></category></entry><entry><title>Octave: save a figure to a file</title><link href="/octave-save-a-figure-to-a-file.html" rel="alternate"></link><updated>2011-05-03T18:10:44-04:00</updated><author><name>jchain</name></author><id>tag:,2011-05-03:octave-save-a-figure-to-a-file.html</id><summary type="html">&lt;p&gt;I'm playing around &lt;a href="http://www.octave.org"&gt;Octave&lt;/a&gt; recently. As many other open-source projects, the
documentation is not complete, or more precisely speaking, not friendly to new user. When I want to
save a picture to the disk, the documentation tells me to use &lt;em&gt;print()&lt;/em&gt;, but I still need to try
several times before get it straight. Here is my example.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="nb"&gt;i&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;11&lt;/span&gt;
&lt;span class="n"&gt;surf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;ue&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nb"&gt;i&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="mf"&gt;0.2&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
&lt;span class="n"&gt;filename&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;sprintf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&amp;quot;&lt;span class="n"&gt;us_t&lt;/span&gt;&lt;span class="c"&gt;%d.png&amp;quot;, i-1);&lt;/span&gt;
&lt;span class="n"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;filename&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;-dpng&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c"&gt;% Note the quote&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;BTW: I'm very grateful for the high compatibility of Octave code with Matlab code.&lt;/p&gt;</summary><category term="Math"></category><category term="Octave"></category></entry><entry><title>XPM and deprecated conversion error</title><link href="/xpm-and-deprecated-conversion-error.html" rel="alternate"></link><updated>2011-03-31T22:02:05-04:00</updated><author><name>jchain</name></author><id>tag:,2011-03-31:xpm-and-deprecated-conversion-error.html</id><summary type="html">&lt;p&gt;How to get rid of this warning: deprecated conversion from string constant to `char*'&lt;/p&gt;
&lt;p&gt;Change "char&lt;em&gt;" to "const char&lt;/em&gt;" in the XPM file.&lt;/p&gt;</summary><category term="C++"></category></entry><entry><title>Wired MinGW Make failure problem</title><link href="/wired-mingw-make-failure-problem.html" rel="alternate"></link><updated>2011-03-28T06:47:41-04:00</updated><author><name>jchain</name></author><id>tag:,2011-03-28:wired-mingw-make-failure-problem.html</id><summary type="html">&lt;p&gt;Today when I tried to build wxWidgets with MinGW, I kept running into this wired problem.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;process_begin: CreateProcess(....) failed.
make (e=2): The system cannot find the file specified.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;The problem was solved by reading this post &lt;a href="http://www.allegro.cc/forums/print-thread/593750"&gt;http://www.allegro.cc/forums/print-thread/593750&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;I put Cygwin bash.exe and sh.exe into Windows PATH environment variable which make MinGW Make unhappy.&lt;/p&gt;</summary><category term="Cygwin"></category><category term="MinGW"></category><category term="tips"></category></entry><entry><title>Set Subversion auto-props</title><link href="/set-subversion-auto-props.html" rel="alternate"></link><updated>2011-03-28T05:38:45-04:00</updated><author><name>jchain</name></author><id>tag:,2011-03-28:set-subversion-auto-props.html</id><summary type="html">&lt;p&gt;Keep you away from the annoying line ending character problem when you are in a cross-platform
development scenario.  Read this article:
&lt;a href="http://www.wxwidgets.org/develop/svn.htm"&gt;http://www.wxwidgets.org/develop/svn.htm&lt;/a&gt;&lt;/p&gt;</summary><category term="Subversion"></category><category term="wxWidgets"></category></entry><entry><title>Update your DISPLAY environment variable for Nomachine and Screen user</title><link href="/update-your-display-environment-variable-for-nomachine-and-screen-user.html" rel="alternate"></link><updated>2011-03-12T06:16:18-05:00</updated><author><name>jchain</name></author><id>tag:,2011-03-12:update-your-display-environment-variable-for-nomachine-and-screen-user.html</id><summary type="html">&lt;p&gt;If you are Nomachine and GNU Screen user, have you been annoyed by the problem that you can't start
GUI program in a screen session? The reason to the problem is that the environment variable DISPLAY
is not properly set when you attach a screen session. There are two posts talking about how to
update environment variables such as SSH and DISPLAY  to make the life much easier.&lt;/p&gt;
&lt;p&gt;&lt;a href="http://samrowe.com/wordpress/ssh-agent-and-gnu-screen/"&gt;http://samrowe.com/wordpress/ssh-agent-and-gnu-screen&lt;/a&gt;/&lt;/p&gt;
&lt;p&gt;&lt;a href="http://alan.lamielle.net/2009/03/09/environment-variables-and-gnu-screen"&gt;http://alan.lamielle.net/2009/03/09/environment-variables-and-gnu-screen &lt;/a&gt;&lt;/p&gt;</summary><category term="Bash"></category><category term="Linux"></category><category term="Screen"></category><category term="tips"></category></entry><entry><title>Disappointed with GCJ(GNU Compiler for Java)</title><link href="/disappointed-with-gcjgnu-compiler-for-java.html" rel="alternate"></link><updated>2011-03-09T17:42:05-05:00</updated><author><name>jchain</name></author><id>tag:,2011-03-09:disappointed-with-gcjgnu-compiler-for-java.html</id><summary type="html">&lt;p&gt;I gave a shot to GCJ to do a tiny project. At the first place I thought the official Sun JDK was bulky and I preferred a lightweight Java SDK. But it turned out that the debugger for GCJ was almost unable to use. I was unable even to inspect an array. So switched to the official JDK and used JDB in Emacs(binding step-in, step-next to F7/F8). I was quite happy with it. I think for any Java novice, JDK is the way to go.&lt;/p&gt;</summary><category term="Emacs"></category><category term="GCJ"></category><category term="Java"></category></entry><entry><title>Trac's milestone feature is helpful to track the progress</title><link href="/tracs-milestone-feature-is-helpful-to-track-the-progress.html" rel="alternate"></link><updated>2011-03-09T17:31:22-05:00</updated><author><name>jchain</name></author><id>tag:,2011-03-09:tracs-milestone-feature-is-helpful-to-track-the-progress.html</id><summary type="html">&lt;p&gt;I have used several project management software before. But today I found that the milestone feature
in Trac very impressive. At the beginning of a project I can file all the tasks, to-dos, required
features to the issue tracking system for a specific milestone. By viewing the progress bar, I can
have a clear big picture about the progress of the project. I like this feature very much. Very
helpful.&lt;/p&gt;</summary><category term="Project management"></category></entry><entry><title>Built gtk3.0 on openSUSE-11.1</title><link href="/built-gtk3-0-on-opensuse-11-1.html" rel="alternate"></link><updated>2011-03-03T07:48:26-05:00</updated><author><name>jchain</name></author><id>tag:,2011-03-03:built-gtk3-0-on-opensuse-11-1.html</id><summary type="html">&lt;p&gt;I built gtk3.0 from source on openSUSE-11.1 x86-64bit. As expected, I ran into one annoying problem like this:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;symbol lookup error: /opt/gnome/lib/libcairo-gobject.so.2: undefined symbol: cairo_region_destroy&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;I searched for the solution online. Someone suggested disabling gobject-introspection when compiling gtk3. But the default setting for gtk3 is indeed without gobject-introspection support. I got stuck and very confused. Finally, I got the things done by compiling the latest gobject-introspection(0.10.x) and enabling gobject-introspection support for atk, gdk-pixbuf and any other dependency libraries which could be set to enable this feature. YMMV. Here is the screenshot showing the about dialog from gtk3-demo.&lt;/p&gt;
&lt;p&gt;[caption id="attachment_147" align="aligncenter" width="432" caption="gtk3-demo"]&lt;a href="http://zandyware.files.wordpress.com/2011/03/gtk3-demo.png"&gt;&lt;img alt="gtk3-demo" src="http://zandyware.files.wordpress.com/2011/03/gtk3-demo.png" /&gt;&lt;/a&gt;[/caption]&lt;/p&gt;</summary><category term="GTK"></category><category term="Linux"></category></entry><entry><title>Perl Inline module is awesome</title><link href="/perl-inline-module-is-awesome.html" rel="alternate"></link><updated>2011-03-01T20:22:50-05:00</updated><author><name>jchain</name></author><id>tag:,2011-03-01:perl-inline-module-is-awesome.html</id><summary type="html">&lt;p&gt;As you might know that I'm doing some image processing with Perl and GD module. However, iterating
a whole 512x512 image, i.e. every pixels, is prohibitively slow in Perl. Here is the Inline module
to rescue. After playing around with it in several minutes, yes, only several minutes, my Perl code
with C Inline function accessing the image boosted up 10 times faster! Every Perl programmer should
check it out:
&lt;a href="http://search.cpan.org/~sisyphus/Inline-0.48/Inline.pod"&gt;http://search.cpan.org/~sisyphus/Inline-0.48/Inline.pod&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Edited: I would like to add a toy example here for anyone who are interested in Perl::Inline. It
shows how to call external library(GD) from Perl script.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="cp"&gt;#!/usr/bin/perl&lt;/span&gt;
&lt;span class="n"&gt;use&lt;/span&gt; &lt;span class="n"&gt;strict&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="n"&gt;use&lt;/span&gt; &lt;span class="n"&gt;warnings&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="n"&gt;print&lt;/span&gt; &lt;span class="nf"&gt;gd_test&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;

&lt;span class="n"&gt;use&lt;/span&gt; &lt;span class="n"&gt;Inline&lt;/span&gt; &lt;span class="n"&gt;C&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;Config&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt;
&lt;span class="n"&gt;LIBS&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;lgd&lt;/span&gt;&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="n"&gt;use&lt;/span&gt; &lt;span class="n"&gt;Inline&lt;/span&gt; &lt;span class="n"&gt;C&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt;&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="n"&gt;END_OF_C_CODE&lt;/span&gt;&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="cp"&gt;#include&lt;/span&gt; &lt;span class="cpf"&gt;&amp;quot;gd.h&amp;quot;&lt;/span&gt;&lt;span class="cp"&gt;&lt;/span&gt;

&lt;span class="cm"&gt;/* Bring in standard I/O so we can output the PNG to a file */&lt;/span&gt;
&lt;span class="cp"&gt;#include&lt;/span&gt; &lt;span class="cpf"&gt;&amp;lt;stdio.h&amp;gt;&lt;/span&gt;&lt;span class="cp"&gt;&lt;/span&gt;

&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="nf"&gt;gd_test&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;

&lt;span class="cm"&gt;/* Declare the image */&lt;/span&gt;
&lt;span class="n"&gt;gdImagePtr&lt;/span&gt; &lt;span class="n"&gt;im&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="cm"&gt;/* Declare output files */&lt;/span&gt;
&lt;span class="kt"&gt;FILE&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;pngout&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;jpegout&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="cm"&gt;/* Declare color indexes */&lt;/span&gt;
&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;black&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;white&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="cm"&gt;/* Allocate the image: 64 pixels across by 64 pixels tall */&lt;/span&gt;
&lt;span class="n"&gt;im&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;gdImageCreate&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;64&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;64&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="cm"&gt;/* Allocate the color black (red, green and blue all minimum).&lt;/span&gt;
&lt;span class="cm"&gt;Since this is the first color in a new image, it will&lt;/span&gt;
&lt;span class="cm"&gt;be the background color. */&lt;/span&gt;

&lt;span class="n"&gt;black&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;gdImageColorAllocate&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;im&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="cm"&gt;/* Allocate the color white (red, green and blue all maximum). */&lt;/span&gt;
&lt;span class="n"&gt;white&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;gdImageColorAllocate&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;im&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;255&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;255&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;255&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="cm"&gt;/* Draw a line from the upper left to the lower right,&lt;/span&gt;
&lt;span class="cm"&gt;using white color index. */&lt;/span&gt;
&lt;span class="n"&gt;gdImageLine&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;im&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;63&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;63&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;white&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="cm"&gt;/* Open a file for writing. &amp;quot;wb&amp;quot; means &amp;quot;write binary&amp;quot;, important&lt;/span&gt;
&lt;span class="cm"&gt;under MSDOS, harmless under Unix. */&lt;/span&gt;
&lt;span class="n"&gt;pngout&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;fopen&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;test.png&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;wb&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="cm"&gt;/* Do the same for a JPEG-format file. */&lt;/span&gt;
&lt;span class="n"&gt;jpegout&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;fopen&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;test.jpg&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;wb&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="cm"&gt;/* Output the image to the disk file in PNG format. */&lt;/span&gt;
&lt;span class="n"&gt;gdImagePng&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;im&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;pngout&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="cm"&gt;/* Output the same image in JPEG format, using the default&lt;/span&gt;
&lt;span class="cm"&gt;JPEG quality setting. */&lt;/span&gt;
&lt;span class="n"&gt;gdImageJpeg&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;im&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;jpegout&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="cm"&gt;/* Close the files. */&lt;/span&gt;
&lt;span class="n"&gt;fclose&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;pngout&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="n"&gt;fclose&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;jpegout&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="cm"&gt;/* Destroy the image in memory. */&lt;/span&gt;
&lt;span class="n"&gt;gdImageDestroy&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;im&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="n"&gt;END_OF_C_CODE&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;</summary><category term="C++"></category><category term="Perl"></category></entry><entry><title>Smart match ~~ in Perl 5.10 is the equivalence to 'in' in Python</title><link href="/smart-match-in-perl-5-10-is-the-equivalence-to-in-in-python.html" rel="alternate"></link><updated>2011-02-27T17:09:13-05:00</updated><author><name>jchain</name></author><id>tag:,2011-02-27:smart-match-in-perl-5-10-is-the-equivalence-to-in-in-python.html</id><summary type="html">&lt;p&gt;Sometimes I really miss the keyword 'in' in Python which is very common operation in programming to
check if a object is in a set. I'm very glad to see the smart match ~~ in Perl 5.10 provides the
similar feature. &lt;/p&gt;</summary><category term="Perl"></category><category term="Python"></category></entry><entry><title>Message passing in OOP?</title><link href="/message-passing-in-oop.html" rel="alternate"></link><updated>2011-02-23T19:57:55-05:00</updated><author><name>jchain</name></author><id>tag:,2011-02-23:message-passing-in-oop.html</id><summary type="html">&lt;p&gt;&lt;a href="http://en.wikipedia.org/wiki/Message_passing#Influences_on_other_programming_models"&gt;http://en.wikipedia.org/wiki/Message_passing#Influences_on_other_programming_models&lt;/a&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;a href="http://en.wikipedia.org/wiki/Alan_Kay"&gt;Alan Kay&lt;/a&gt; has argued&lt;a href="http://en.wikipedia.org/wiki/Message_passing#cite_note-0"&gt;[1]&lt;/a&gt; that message passing is more important than objects in OOP, and that objects themselves are often over-emphasized.&lt;/p&gt;
&lt;/blockquote&gt;</summary></entry><entry><title>Message passing versus calling?</title><link href="/message-passing-versus-calling.html" rel="alternate"></link><updated>2011-02-23T19:48:30-05:00</updated><author><name>jchain</name></author><id>tag:,2011-02-23:message-passing-versus-calling.html</id><summary type="html">&lt;p&gt;My long term confusion about the message passing and calling is answered here:
&lt;a href="http://en.wikipedia.org/wiki/Message_passing#Message_passing_versus_calling"&gt;http://en.wikipedia.org/wiki/Message_passing#Message_passing_versus_calling&lt;/a&gt;&lt;/p&gt;</summary><category term="Event-driven programming"></category><category term="OOP"></category></entry><entry><title>Recommend to read: Who Moved My State?</title><link href="/recommend-to-read-who-moved-my-state.html" rel="alternate"></link><updated>2011-02-23T03:21:40-05:00</updated><author><name>jchain</name></author><id>tag:,2011-02-23:recommend-to-read-who-moved-my-state.html</id><summary type="html">&lt;p&gt;A good article to read. It made me to rethink the GUI programming with event-driven pattern.&lt;/p&gt;
&lt;p&gt;&lt;a href="http://www.drdobbs.com/184401643"&gt; http://www.drdobbs.com/184401643&lt;/a&gt;&lt;/p&gt;</summary><category term="C++"></category><category term="GUI"></category></entry><entry><title>Cautious about the limit of color number in Perl GD package</title><link href="/cautious-about-the-limit-of-color-number-in-perl-gd-package.html" rel="alternate"></link><updated>2011-02-20T00:30:56-05:00</updated><author><name>jchain</name></author><id>tag:,2011-02-20:cautious-about-the-limit-of-color-number-in-perl-gd-package.html</id><summary type="html">&lt;p&gt;In the recent Perl hacking, I used GD package a lot to do image processing like region labeling and
border tracing. I used GD to access the pixels. I ran into a very wired bug that the region labeling
code in some cases failed to identify the regions of interest(ROIs) correctly but worked well in
other cases.&lt;/p&gt;
&lt;p&gt;After a painful debugging I found out the culprit. If $value is used to represent the label value,
and I use $img-&amp;gt;setPixel($x, $y, $value) to store the value. Any value bigger than 256 will be
rounded to the range from 0 to 255 by modulo operator. So the actual value in the label image won't
be over 255. This means that if you use GD image like a matrix, the value of a element of the matrix
can't be more than 255.&lt;strong&gt; I think it is due to the physical limit of the colormap which essentially
can store no more than 256 colors.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Finally, my suggestion is using &lt;strong&gt;Math::MatrixReal&lt;/strong&gt; package.&lt;/p&gt;</summary><category term="Image processing"></category><category term="Perl"></category><category term="tips"></category></entry><entry><title>Linux 'ldd' equivalence on Cygwin?</title><link href="/linux-ldd-equivalence-on-cygwin.html" rel="alternate"></link><updated>2011-02-06T18:25:27-05:00</updated><author><name>jchain</name></author><id>tag:,2011-02-06:linux-ldd-equivalence-on-cygwin.html</id><summary type="html">&lt;p&gt;Run "cygcheck " and see if all DLLs it requires can be found. I used it on Cygwin to solve a shared library missing problem when I started octave. The lapack library(.dll) was not loaded because of its path was not in $PATH. &lt;/p&gt;</summary><category term="Cygwin"></category><category term="Octave"></category><category term="tips"></category></entry><entry><title>Search and replace in a visual selection</title><link href="/search-and-replace-in-a-visual-selection.html" rel="alternate"></link><updated>2011-02-01T07:47:14-05:00</updated><author><name>jchain</name></author><id>tag:,2011-02-01:search-and-replace-in-a-visual-selection.html</id><summary type="html">&lt;p&gt;:%s/\%Vold/NEW/g&lt;/p&gt;</summary><category term="tips"></category><category term="Vim"></category></entry><entry><title>sbcl mmap cannot allocate memory?</title><link href="/sbcl-mmap-cannot-allocate-memory.html" rel="alternate"></link><updated>2011-01-28T19:28:53-05:00</updated><author><name>jchain</name></author><id>tag:,2011-01-28:sbcl-mmap-cannot-allocate-memory.html</id><summary type="html">&lt;p&gt;Recently I want to give Common Lisp a try. After reading this great &lt;a href="http://common-lisp.net/~dlw/LispSurvey.html"&gt;Common Lisp Implementation Survey&lt;/a&gt;, I decided to go first with SBCL. After installing the binary package of SBCL-1.0.45 on my openSUSE-11.1 x86-64bit with 8Giga memory, I ran into this annoying error message when I started SBCL in terminal:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;mmap: Cannot allocate memory
ensure_space: failed to validate 8589869056 bytes at 0x1000000000
(hint: Try "ulimit -a"; maybe you should increase memory limits.)&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;I researched online for a while and finally I came up a solution(it worked for me at least). Solution: start sbcl like this&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;sbcl --dynamic-space-size 2028 --core /local/vol00/software/lib/sbcl/sbcl.core&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;I guess the reason to fail is that by default sbcl will allocate 8Giga MB memory on x86-64 bit platform, which is not permitted due to the physical memory limitation. So use --dynamic-space-size to change the setting, also use --core option if your sbcl installation is not in the default location.&lt;/p&gt;</summary><category term="Common Lisp"></category><category term="tips"></category></entry><entry><title>Start Vim without loading vimrc</title><link href="/start-vim-without-loading-vimrc.html" rel="alternate"></link><updated>2011-01-22T03:25:21-05:00</updated><author><name>jchain</name></author><id>tag:,2011-01-22:start-vim-without-loading-vimrc.html</id><summary type="html">&lt;p&gt;You can also start it without reading any of the initialization files
(.vimrc, /etc/vim/vimrc) like this:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;vim -u NONE file
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Credit due to &lt;a href="http://fossplanet.com/f10/open-vim-syntax-off-92829/"&gt;Smoot Carl-Mitchell&lt;/a&gt;&lt;/p&gt;</summary><category term="tips"></category><category term="Vim"></category></entry><entry><title>Share my newly created Valgrind wxGTK-2.9.1 suppression file</title><link href="/share-my-newly-created-valgrind-wxgtk-2-9-1-suppression-file.html" rel="alternate"></link><updated>2011-01-21T20:34:21-05:00</updated><author><name>jchain</name></author><id>tag:,2011-01-21:share-my-newly-created-valgrind-wxgtk-2-9-1-suppression-file.html</id><summary type="html">&lt;p&gt;If you want use Valgrind to check the memory leak of your wxGTK program, you probably end up with
too many false detections. You need a suppression file to help you focus on the real problem you are
dealing with. I followed the great article at&lt;a href="http://wiki.wxwidgets.org/Valgrind_Suppression_File_Howto"&gt;
http://wiki.wxwidgets.org/Valgrind_Suppression_File_Howto&lt;/a&gt;
to create my first wxGTK suppression file. The version of wxGTK is 2.9.1 and my OS is openSUSE-11.1
&lt;strong&gt;x86-64&lt;/strong&gt; . If your OS arch is not x86-64, you may need to modify the string occurrences  '64'  in
suppression file. I tested my suppression file with wxWdgets sample program 'mininal' the error
number is 2, with sample opengl program 'cube' the error number is 0. I hope I didn't overact in my
suppression file.&lt;/p&gt;
&lt;p&gt;I suggested using the following command to fire up valgrind:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;G_SLICE=always-malloc G_DEBUG=gc-friendly valgrind --leak-check=yes
--suppressions=./wx.supp --log-file=valgrind.log ./YOUR_PROG
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Download it at here &lt;a href="http://zandyware.files.wordpress.com/2011/01/wx-supp.doc"&gt;wx.supp&lt;/a&gt;. And
&lt;strong&gt;remove the 'doc' extension or rename to whatever you like since it is a plain txt file per se.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Read more at &lt;a href="http://live.gnome.org/Valgrind"&gt;http://live.gnome.org/Valgrind &lt;/a&gt;&lt;/p&gt;</summary><category term="C/C++"></category><category term="Debugging"></category><category term="tips"></category><category term="Valgrind"></category><category term="wxWidgets"></category></entry><entry><title>How to quote long command in Perl system()</title><link href="/how-to-quote-long-command-in-perl-system-call.html" rel="alternate"></link><updated>2011-01-20T06:14:43-05:00</updated><author><name>jchain</name></author><id>tag:,2011-01-20:how-to-quote-long-command-in-perl-system-call.html</id><summary type="html">&lt;p&gt;If you call external command in your Perl code with system() and your command is very long, you must
want to break it into multi-line but the newline characters really get in the way.  Here is a good
way, IMHO,  to make the code look neat and clean:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;# Annotate the target and landmark image&lt;/span&gt;
&lt;span class="nb"&gt;system&lt;/span&gt; &lt;span class="n"&gt;single_line&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;&lt;/span&gt;
&lt;span class="s"&gt; convert -background black -fill white label:&amp;#39;Target Landmarks&amp;#39; miff:- | composite -gravity north&lt;/span&gt;
&lt;span class="s"&gt; -geometry +0+3 - $target_with_lmk_filename $target_with_lmk_filename&lt;/span&gt;
&lt;span class="s"&gt;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="k"&gt;sub &lt;/span&gt;&lt;span class="nf"&gt;single_line&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
 &lt;span class="k"&gt;my&lt;/span&gt; &lt;span class="nv"&gt;@strings&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nv"&gt;@_&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
 &lt;span class="k"&gt;foreach&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="nv"&gt;@strings&lt;/span&gt; &lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
 &lt;span class="sr"&gt;s/\n/ /g&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
 &lt;span class="sr"&gt;s/\r/ /g&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
 &lt;span class="p"&gt;}&lt;/span&gt;
 &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nb"&gt;wantarray&lt;/span&gt;&lt;span class="p"&gt;?&lt;/span&gt; &lt;span class="nv"&gt;@strings&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nv"&gt;$strings&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Credit due to &lt;a href="http://stackoverflow.com/questions/3707262/how-can-i-quote-a-long-string-in-perl"&gt;http://stackoverflow.com/questions/3707262/how-can-i-quote-a-long-string-in-perl&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;The biggest advantage of this method over string concatenation operator "." is that it is easier to
re-align your code in Vim since your command is not messed with quotation marks.&lt;/p&gt;</summary><category term="Perl"></category><category term="tips"></category></entry><entry><title>Cautious about colorExact() and colorAllocate() in Perl GD package</title><link href="/cautious-about-colorexact-and-colorallocate-in-perl-gd-package.html" rel="alternate"></link><updated>2011-01-17T06:33:45-05:00</updated><author><name>jchain</name></author><id>tag:,2011-01-17:cautious-about-colorexact-and-colorallocate-in-perl-gd-package.html</id><summary type="html">&lt;p&gt;For exising colors, I think it is better to use colorExact() because the color indices would be
consistent among images. For new colors, colorAllocate() is the only choice. But colorAllocate() is
highly recommended to use after colorExact(). It is safer to the color palette. &lt;/p&gt;</summary><category term="Image processing"></category><category term="Perl"></category><category term="tips"></category></entry><entry><title>The Find Command that I Should Keep in Mind</title><link href="/the-find-command-that-i-should-keep-in-mind.html" rel="alternate"></link><updated>2011-01-16T07:46:51-05:00</updated><author><name>jchain</name></author><id>tag:,2011-01-16:the-find-command-that-i-should-keep-in-mind.html</id><summary type="html">&lt;p&gt;find . -regex '.&lt;em&gt;/[0-9]&lt;/em&gt;.gif -exec ./filter.pl -i {} \;&lt;/p&gt;</summary><category term="Linux"></category><category term="tips"></category></entry><entry><title>Wired Unicode Problem in Source Code File</title><link href="/wired-unicode-problem-in-source-code-file.html" rel="alternate"></link><updated>2011-01-12T22:27:22-05:00</updated><author><name>jchain</name></author><id>tag:,2011-01-12:wired-unicode-problem-in-source-code-file.html</id><summary type="html">&lt;p&gt;Today I ran into a very wired problem when I was trying to compile a C++ source file. What
I received was like this:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Evaluator.h:1: error: stray ‘\357’ in program
Evaluator.h:1: error: stray ‘\273’ in program
Evaluator.h:1: error: stray ‘\277’ in program
Evaluator.h:1: error: stray ‘#’ in program&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;I googled this error and it turned out to be there were some invisible Unicode characters in the
source file. I guessed that our team were using different editors and operating systems, and
someone  accidentally inserted one or two unicode characters. It was so bad that they were
invisible!&lt;/p&gt;
&lt;p&gt;The first line was a comment so I deleted the whole line and retyped. But the build was still there!
So so wired. I used Linux command-line tool 'file' to detect the type of the source file&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Evaluatore.h: UTF-8 Unicode (with BOM) C program text&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;But for the other files in the same directory, 'file' told me that&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;ASCII C program text&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Yes, I NEED ASCII file encoding! I tried gedit and iconv but somehow they both complained the
conversion. So I came up the final idea, use command-line tool 'cat' to&lt;strong&gt; dump it to the terminal
screen&lt;/strong&gt; and copy whole content without the first blank space and paste into a new file. It worked.
If you copy and paste whole dumped content you would see the visible unicode. Delete it.&lt;/p&gt;
&lt;p&gt;When I dumped the file, I saw an unexpected blank space at the very front of the first line.
I thought it was the culprit. I also noticed that&lt;strong&gt; 'cat foo.h &amp;gt; bar.h' didn't get rid of the
invisible character&lt;/strong&gt;.  Copy and Paste!&lt;/p&gt;</summary><category term="C++"></category><category term="text processing"></category><category term="tips"></category></entry><entry><title>Two source code line counters you should have</title><link href="/two-source-code-line-counters-you-should-have.html" rel="alternate"></link><updated>2011-01-11T17:14:52-05:00</updated><author><name>jchain</name></author><id>tag:,2011-01-11:two-source-code-line-counters-you-should-have.html</id><summary type="html">&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="http://sunset.usc.edu/research/CODECOUNT/"&gt;UCC&lt;/a&gt;(Unified Code Count) is developed by the researchers at &lt;a href="http://www.usc.edu"&gt;USC&lt;/a&gt; in C++. It is cross-platform and supports a bunch of languages. The most impressive feature to me is that it can do code complexity analysis, which is very rare for a open-source code counter.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="http://cloc.sourceforge.net/"&gt;CLOC&lt;/a&gt;(Count Lines of Code ) is written in Perl. Lightweight, easy to use.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;So I would recommend every programmers to have both in their arsenal.&lt;/p&gt;</summary><category term="Tools"></category></entry><entry><title>colorgcc and ccache work together</title><link href="/colorgcc-and-ccache-work-together.html" rel="alternate"></link><updated>2011-01-07T16:52:29-05:00</updated><author><name>jchain</name></author><id>tag:,2011-01-07:colorgcc-and-ccache-work-together.html</id><summary type="html">&lt;p&gt;The plain and lengthy output of g++ was a hurt to eye when your code contains a lot of template
programming. &lt;a href="http://schlueters.de/colorgcc.html"&gt;colorgcc&lt;/a&gt; can make life easier. It can work well
with &lt;a href="http://ccache.samba.org/"&gt;ccache&lt;/a&gt; but needs a bit trick to connect them together. I would like
to recommend the solution at&lt;/p&gt;
&lt;p&gt;&lt;a href="http://stackoverflow.com/questions/1995415/g-colorgcc-and-ccache"&gt;http://stackoverflow.com/questions/1995415/g-colorgcc-and-ccache&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;I copy the main part right here:&lt;/p&gt;
&lt;blockquote&gt;
&lt;h2&gt;The Short Answer&lt;/h2&gt;
&lt;p&gt;Without patching &lt;code&gt;colorgcc.pl&lt;/code&gt; itself, the easiest way to fix this is to write yourself a simple wrapper script for each command, calling &lt;code&gt;ccache&lt;/code&gt; with the appropriate arguments for that command, and passing along the arguments the script received (effectively &lt;a href="http://en.wikipedia.org/wiki/Currying"&gt;currying&lt;/a&gt; the call to &lt;code&gt;ccache&lt;/code&gt;.)&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;E.g., for &lt;strong&gt;gcc&lt;/strong&gt;:&lt;/p&gt;
&lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;/usr/local/bin/ccache-gcc.sh:&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;#!/bin/bash
ccache /usr/bin/gcc "$@"
&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;~/.colorgcc:&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;gcc: /usr/local/bin/ccache-gcc.sh
&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;p&gt;and for &lt;strong&gt;g++&lt;/strong&gt;:&lt;/p&gt;
&lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;/usr/local/bin/ccache-g++.sh:&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;#!/bin/bash
ccache /usr/bin/g++ "$@"
&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;~/.colorgcc:&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;gcc: /usr/local/bin/ccache-g++.sh
&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;p&gt;There are ways to clean this up so that you only use a single script,  with symlinks for each variant, but those are beyond the scope of this  answer, and I leave them to you as an excercise :-)&lt;/p&gt;</summary><category term="tips"></category></entry><entry><title>Updated to Libreoffice-3.3 and Tmux-1.4</title><link href="/updated-to-libreoffice-3-3-and-tmux-1-4.html" rel="alternate"></link><updated>2010-12-30T23:03:38-05:00</updated><author><name>jchain</name></author><id>tag:,2010-12-30:updated-to-libreoffice-3-3-and-tmux-1-4.html</id><summary type="html">&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Upgraded to&lt;a href="http://www.libreoffice.org/"&gt; Libreoffice-3.3&lt;/a&gt;. Many improvements can be seen.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Upgraded to&lt;a href="http://tmux.sourceforge.net/"&gt; tmux-1.4&lt;/a&gt;. It works very well on openSUSE-11.1. It definitely beats GNU Screen(even Git version).&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;</summary></entry><entry><title>How to install OpenOffice 3 without root privilege</title><link href="/how-to-install-openoffice-3-without-root-privilege.html" rel="alternate"></link><updated>2010-12-21T20:06:02-05:00</updated><author><name>jchain</name></author><id>tag:,2010-12-21:how-to-install-openoffice-3-without-root-privilege.html</id><summary type="html">&lt;p&gt;The default openoffice of my desktop Linux was aging and I just wanted to update to the latest
openoffice-3.2. But my problem was I didn't have the root privilege to do that. The official
installer of OpenOffice failed again over again without notifying you that the reason of failure was
the lack of root privilege. Finally I found this great
&lt;a href="http://www.oooforum.org/forum/viewtopic.phtml?t=26173"&gt;post&lt;/a&gt;. I followed what it said and it worked
like a charm. Only one thing I want to add: if you use color &lt;em&gt;ls&lt;/em&gt;, use &lt;strong&gt;ls --color=never&lt;/strong&gt; to
disable the color output.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;Download the installation package from OpenOffice website.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Unzip it into a directory.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;for i in &lt;code&gt;ls --color=never OOO320_m18_native_packed-1_en-US.9502/RPMS/*rpm&lt;/code&gt;; do rpm2cpio $i | cpio -ivd; done&lt;/strong&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;cd OOO320_m18_native_packed-1_en-US.9502/RPMS/opt/openoffice.org3/program/&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;run ./soffice&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;(option) create symbolic link to soffice.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;(option) set file association in Nautilus. Right click a doc and choose &lt;strong&gt;Properties-&amp;gt;Open with -&amp;gt; Add...&lt;/strong&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;</summary><category term="openoffice"></category><category term="tips"></category><category term="word processing"></category></entry><entry><title>Convert ogv to flv in Linux</title><link href="/convert-ogv-to-flv-in-linux.html" rel="alternate"></link><updated>2010-12-08T22:26:07-05:00</updated><author><name>jchain</name></author><id>tag:,2010-12-08:convert-ogv-to-flv-in-linux.html</id><summary type="html">&lt;p&gt;I use recordMyDesktop to grab the screen movie but its default format is in ogv. If you want to
convert to Flash format locally you can use the following command. Feel free to add it in your
bashrc. If I recall correctly, this method can produce the best conversion in Linux platform.
Correct me if I'm wrong. Also I forgot the source the following tip. If you know it, let me know.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;# Convert ogv to flv.&lt;/span&gt;
&lt;span class="c1"&gt;# Usage: ogv2flv input.ogv -o output.flv&lt;/span&gt;
&lt;span class="c1"&gt;# add -audiofile yoursound.wav if you need to replace the soundtrack alias &lt;/span&gt;
&lt;span class="nv"&gt;ogv2flv&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;mencoder -of lavf -oac mp3lame -lameopts abr:br=56 -srate 22050 -ovc lavc -lavcopts vcodec=flv:vbitrate=250:mbd=2:mv0:trell:v4mv:cbp:last_pred=3 -vf scale=640:480&amp;#39;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;</summary><category term="Linux"></category><category term="tips"></category></entry><entry><title>Iterative closest points(ICP) demo</title><link href="/iterative-closest-pointsicp-demo.html" rel="alternate"></link><updated>2010-12-06T21:34:32-05:00</updated><author><name>jchain</name></author><id>tag:,2010-12-06:iterative-closest-pointsicp-demo.html</id><summary type="html">&lt;p&gt;&lt;a href="http://www.youtube.com/watch?v=igb8mAJ6F5I"&gt;http://www.youtube.com/watch?v=igb8mAJ6F5I&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="http://zandyware.files.wordpress.com/2010/12/out.png" title="Benchmark of Iterative Closest Points with OpenMP" /&gt;&lt;/p&gt;
&lt;p&gt;The Perl code generating the plot is listed below&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="ch"&gt;#!/usr/bin/perl&lt;/span&gt;

&lt;span class="k"&gt;use&lt;/span&gt; &lt;span class="n"&gt;strict&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;use&lt;/span&gt; &lt;span class="n"&gt;warnings&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;use&lt;/span&gt; &lt;span class="nn"&gt;Chart::&lt;/span&gt;&lt;span class="n"&gt;Gnuplot&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="c1"&gt;### Write running time  &lt;/span&gt;
&lt;span class="nb"&gt;open&lt;/span&gt; &lt;span class="k"&gt;my&lt;/span&gt; &lt;span class="nv"&gt;$IN&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;&amp;lt;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;benchmark.dat&amp;quot;&lt;/span&gt; &lt;span class="ow"&gt;or&lt;/span&gt; &lt;span class="nb"&gt;die&lt;/span&gt; &lt;span class="vg"&gt;$!&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="c1"&gt;# Data&lt;/span&gt;
&lt;span class="k"&gt;my&lt;/span&gt; &lt;span class="nv"&gt;@x&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;my&lt;/span&gt; &lt;span class="nv"&gt;@y&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;while&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="sr"&gt;&amp;lt;$IN&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nb"&gt;chomp&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;my&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$t1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nv"&gt;$t2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;split&lt;/span&gt; &lt;span class="sr"&gt;/\s/&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nb"&gt;push&lt;/span&gt; &lt;span class="nv"&gt;@x&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nv"&gt;$t1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nb"&gt;push&lt;/span&gt; &lt;span class="nv"&gt;@y&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nv"&gt;$t2&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="c1"&gt;# Create chart object and specify the properties of the chart&lt;/span&gt;
&lt;span class="k"&gt;my&lt;/span&gt; &lt;span class="nv"&gt;$chart&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nn"&gt;Chart::&lt;/span&gt;&lt;span class="n"&gt;Gnuplot&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="k"&gt;new&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="n"&gt;output&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;out.eps&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="n"&gt;title&lt;/span&gt;  &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;Iterative Closest Points with Stanford Bunny&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="n"&gt;xlabel&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;Number of threads&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="n"&gt;ylabel&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;Time(s)&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="n"&gt;boxwidth&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;0.8 relative&amp;quot;&lt;/span&gt;
&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="c1"&gt;# Create dataset object and specify the properties of the dataset&lt;/span&gt;
&lt;span class="k"&gt;my&lt;/span&gt; &lt;span class="nv"&gt;$dataSet&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nn"&gt;Chart::Gnuplot::&lt;/span&gt;&lt;span class="n"&gt;DataSet&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="k"&gt;new&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="n"&gt;xdata&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="o"&gt;\&lt;/span&gt;&lt;span class="nv"&gt;@x&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="n"&gt;ydata&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="o"&gt;\&lt;/span&gt;&lt;span class="nv"&gt;@y&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="n"&gt;title&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;Time&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="c1"&gt;#style =&amp;gt; &amp;quot;linespoints&amp;quot;,&lt;/span&gt;
    &lt;span class="n"&gt;style&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;boxes&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="n"&gt;fill&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;0.75&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="c1"&gt;# Plot the data set on the chart&lt;/span&gt;
&lt;span class="nv"&gt;$chart&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;plot2d&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$dataSet&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="c1"&gt;##################################################&lt;/span&gt;

&lt;span class="c1"&gt;# Plot many data sets on a single chart&lt;/span&gt;
&lt;span class="c1"&gt;#$chart-&amp;gt;plot2d($dataSet1, $dataSet2, ...); &lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;</summary><category term="OpenMP"></category><category term="VTK"></category></entry><entry><title>Using OpenMP with CMake</title><link href="/using-openmp-with-cmake.html" rel="alternate"></link><updated>2010-12-06T02:51:14-05:00</updated><author><name>jchain</name></author><id>tag:,2010-12-06:using-openmp-with-cmake.html</id><summary type="html">&lt;p&gt;Add the following lines into your CMakeLists.txt&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;# Even though -fopenmp won&amp;#39;t appear in the GUI options, it does take effect
SET(CMAKE_CXX_FLAGS &amp;quot;&lt;span class="cp"&gt;${&lt;/span&gt;&lt;span class="n"&gt;CMAKE_CXX_FLAGS&lt;/span&gt;&lt;span class="cp"&gt;}&lt;/span&gt; -fopenmp&amp;quot;)
SET(CMAKE_C_FLAGS &amp;quot;&lt;span class="cp"&gt;${&lt;/span&gt;&lt;span class="n"&gt;CMAKE_C_FLAGS&lt;/span&gt;&lt;span class="cp"&gt;}&lt;/span&gt; -fopenmp&amp;quot;)
&lt;/pre&gt;&lt;/div&gt;</summary><category term="C/C++"></category><category term="CMake"></category><category term="OpenMP"></category></entry><entry><title>Backspace and Delete in TotalView's XTerm commandline interface</title><link href="/backspace-and-delete-in-totalviews-xterm-commandline-interface.html" rel="alternate"></link><updated>2010-11-24T22:02:51-05:00</updated><author><name>jchain</name></author><id>tag:,2010-11-24:backspace-and-delete-in-totalviews-xterm-commandline-interface.html</id><summary type="html">&lt;p&gt;I used TotalView a lot but the keyboard backspace and delete keys were totally messed up. Luckily
I found the solution in a great article as follows:&lt;/p&gt;
&lt;p&gt;&lt;a href="http://www.ibb.net/~anne/keyboard/keyboard.html"&gt;http://www.ibb.net/~anne/keyboard/keyboard.html&lt;/a&gt;&lt;/p&gt;</summary><category term="Debug"></category><category term="Linux"></category><category term="tips"></category><category term="Totalview"></category></entry><entry><title>Install lighttpd as a service in Cygwin</title><link href="/install-lighttpd-as-a-service-in-cygwin.html" rel="alternate"></link><updated>2010-11-24T04:40:44-05:00</updated><author><name>jchain</name></author><id>tag:,2010-11-24:install-lighttpd-as-a-service-in-cygwin.html</id><summary type="html">&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;cygrunsrv --install lighttpd --path /usr/sbin/lighttpd
    --args &amp;quot;-D -f /etc/lighttpd/lighttpd.conf&amp;quot; --disp &amp;quot;CYGWIN lighttpd&amp;quot;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;See more http://www.cygwin.com/ml/cygwin-apps/2004-09/msg00115.html&lt;/p&gt;</summary><category term="Cygwin"></category><category term="Web"></category></entry><entry><title>My super title</title><link href="/my-super-post.html" rel="alternate"></link><updated>2010-10-04T18:40:00-04:00</updated><author><name>Alexis Metaireau</name></author><id>tag:,2010-10-03:my-super-post.html</id><summary type="html"></summary><category term="thats"></category><category term="awesome"></category></entry><entry><title>Shrink the file size of a pdf?</title><link href="/shrink-the-file-size-of-a-pdf.html" rel="alternate"></link><updated>2010-04-27T05:32:06-04:00</updated><author><name>jchain</name></author><id>tag:,2010-04-27:shrink-the-file-size-of-a-pdf.html</id><summary type="html">&lt;p&gt;Want to shrink the file size of a pdf? Use the following command. ebook has a good balance between the file size and the image quality. screen compresses the images too much.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;gs -sDEVICE=pdfwrite -dCompatibilityLevel=1.4 -dPDFSETTINGS=/ebook[screen, ] -dNOPAUSE -dQUIET -dBATCH -sOutputFile=output.pdf input.pdf&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;-dPDFSETTINGS=&lt;/strong&gt;&lt;em&gt;configuration&lt;/em&gt;
    Presets the "distiller parameters" to one of four predefined settings:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;/screen&lt;/strong&gt; selects low-resolution output similar to the Acrobat Distiller "Screen Optimized" setting.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;/ebook&lt;/strong&gt; selects medium-resolution output similar to the Acrobat Distiller "eBook" setting.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;/printer&lt;/strong&gt; selects output similar to the Acrobat Distiller "Print Optimized" setting.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;/prepress&lt;/strong&gt; selects output similar to Acrobat Distiller "Prepress Optimized" setting.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;/default&lt;/strong&gt; selects output intended to be useful across a wide variety of uses, possibly at the expense of a larger output file.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;</summary><category term="text processing"></category><category term="tips"></category></entry><entry><title>const-overloading in C++</title><link href="/const-overloading-in-c.html" rel="alternate"></link><updated>2010-04-25T05:35:39-04:00</updated><author><name>jchain</name></author><id>tag:,2010-04-25:const-overloading-in-c.html</id><summary type="html">&lt;p&gt;See more at &lt;a href="http://www.parashift.com/c++-faq-lite/const-correctness.html"&gt;http://www.parashift.com/c++-faq-lite/const-correctness.html&lt;/a&gt;&lt;/p&gt;</summary><category term="C++"></category></entry><entry><title>Do you want to debug a program with command line parameters in Visual C++ 2008?</title><link href="/do-you-want-to-debug-a-program-with-command-line-parameters-in-visual-c-2008.html" rel="alternate"></link><updated>2010-04-24T05:33:50-04:00</updated><author><name>jchain</name></author><id>tag:,2010-04-24:do-you-want-to-debug-a-program-with-command-line-parameters-in-visual-c-2008.html</id><summary type="html">&lt;p&gt;Set them in project-&amp;gt;configuration properties-&amp;gt;Debugging. But there is one more thing to do: Set your project as the Startup Project in the Solution Explorer! If you don't do that, the command line parameters won't be passed in whatever you try!&lt;/p&gt;</summary><category term="C++"></category><category term="Visual C++"></category></entry><entry><title>[CMake] Cannot determine link language for target?</title><link href="/cmake-cannot-determine-link-language-for-target.html" rel="alternate"></link><updated>2010-03-24T05:37:24-04:00</updated><author><name>jchain</name></author><id>tag:,2010-03-24:cmake-cannot-determine-link-language-for-target.html</id><summary type="html">&lt;p&gt;For whatever reason add&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;SET_TARGET_PROPERTIES(XYZ PROPERTIES LINKER_LANGUAGE C)
&lt;/pre&gt;&lt;/div&gt;</summary><category term="C/C++"></category><category term="CMake"></category></entry><entry><title>Multithreading - The Delphi Way</title><link href="/multithreading-the-delphi-way.html" rel="alternate"></link><updated>2006-12-13T04:45:08-05:00</updated><author><name>jchain</name></author><id>tag:,2006-12-13:multithreading-the-delphi-way.html</id><summary type="html">&lt;p&gt;This is an excellent tutorial on Delphi multi threading programming, see &lt;a href="http://www.eonclash.com/Tutorials/Multithreading/MartinHarvey1.1/ToC.html"&gt;http://www.eonclash.com/Tutorials/Multithreading/MartinHarvey1.1/ToC.html &lt;/a&gt;&lt;/p&gt;</summary><category term="Delphi"></category><category term="Programming"></category><category term="Windows"></category></entry><entry><title>Notes on Installation of Turbo C++ Explorer</title><link href="/notes-on-installation-of-turbo-c-explorer.html" rel="alternate"></link><updated>2006-12-07T04:48:47-05:00</updated><author><name>jchain</name></author><id>tag:,2006-12-07:notes-on-installation-of-turbo-c-explorer.html</id><summary type="html">&lt;p&gt;When starting Turbo C++ Explorer, you may get an error message stating:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;acces violation at adress 51F515BE rtl100.bpl....&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;error with coreide100.bpl&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;designeide100.bpl&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;The workaround is running "regasm" from .NET v1.1 to register the missing  .NET assemblies used by
Turbo C++ Explorer IDE. Go to the C:\Program Files\Borland\BDS\4.0\Bin directory  and run&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;regasm Borland.Studio.Toolsets.dll
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Now you should start the IDE successfully. If you still see an error message box, saying that a
ClassId is missing or similar errors, you can solve this by registering all possible assemblies
manually.&lt;/p&gt;
&lt;p&gt;To do this, navigate to the BDS \Bin directory in the command line and type "dir
Borland.Studio.*.tlb" to list all relevant .tlb files. Then, run "regasm" on the corresponding .dll
file for each.(see
&lt;a href="http://support.borland.com/entry.jspa?externalID=4102&amp;amp;categoryID=39"&gt;http://support.borland.com/entry.jspa?externalID=4102&amp;amp;categoryID=39&lt;/a&gt;)&lt;/p&gt;
&lt;p&gt;OK, then you start a new project from the menu File-&amp;gt;New..., if you are unlucky to get an exception
Class not registered, ClassID {17CD2E5A-9D11-4BB4-8030-1092F6645714}, here is a way to fix it:&lt;/p&gt;
&lt;p&gt;Save the &lt;a href="http://zhangcheng.johnchain.googlepages.com/fix_turbo_cpp.reg"&gt;fix_turbo_cpp.reg&lt;/a&gt; file
into your hard disk, and double click it to import itself into the Registry.(thanks Tim Lichtenberg,
see&lt;strong&gt;
&lt;/strong&gt;&lt;a href="http://qc.borland.com/wc/qcmain.aspx?d=25744"&gt;http://qc.borland.com/wc/qcmain.aspx?d=25744&lt;/a&gt;)&lt;/p&gt;</summary><category term="Delphi"></category></entry><entry><title>Delphi2006 editor shortcuts</title><link href="/delphi2006-editor-shortcuts.html" rel="alternate"></link><updated>2006-09-05T04:52:24-04:00</updated><author><name>jchain</name></author><id>tag:,2006-09-05:delphi2006-editor-shortcuts.html</id><summary type="html">&lt;p&gt;&lt;strong&gt;CTRL+J&lt;/strong&gt; : Invoke code templates&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;CTRL+T&lt;/strong&gt; : Delete current word&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;CTRL+E&lt;/strong&gt; : Incremental search&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;CTRL+Y&lt;/strong&gt; : Delete current line&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;CTRL+SHIFT+G&lt;/strong&gt; : Insert a new GUID at the cursor position&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;CTRL+SHIFT+I&lt;/strong&gt; : Indent the current selected block&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;CTRL+SHIFT+U&lt;/strong&gt; : outdent the current selected block&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;CTRL+SHIFT+Y&lt;/strong&gt; : delete to the end of line&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;CTRL+SHIFT+J&lt;/strong&gt; : Invoke syncedit&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;ALT+[&lt;/strong&gt; : match pair forward&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;ALT+]&lt;/strong&gt; : match pair backward&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;ALT+RightArrow&lt;/strong&gt; : browse forward (hotlink history)&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;ALT+LeftArrow&lt;/strong&gt; : browse backward (hotlink history)&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;ALT+UpArrow&lt;/strong&gt; : browse to symbol under editor cursor (invoke a hotlink and add it to the hotlink history)&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;F4&lt;/strong&gt; : Run program to current cursor position&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;F5&lt;/strong&gt; : Toggle breakpoint&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;F7&lt;/strong&gt; : Debugger step into&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;F8&lt;/strong&gt; : Debugger step over&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;F9&lt;/strong&gt; : Run program under debugger&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;CTRL+F12&lt;/strong&gt; : View units&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;ALT+G&lt;/strong&gt; : Goto line number in editor&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;CTRL+SHIFT+R&lt;/strong&gt; : Start/Stop recording editor macro&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;CTRL+SHIFT+P&lt;/strong&gt; : Play editor macro&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;CTRL+SPACE&lt;/strong&gt; : Invoke code completion&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;CTRL+SHIFT+SPACE&lt;/strong&gt; : Invoke code parameter hints&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;CTRL+ENTER&lt;/strong&gt; : Open file at cursor&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;CTRL+SHIFT+C&lt;/strong&gt; : Invoke class completion for the class that currently contains the cursor&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;CTRL+SHIFT+UpArrow&lt;/strong&gt; : Navigate to method implementation/declaration&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;CTRL+SHIFT+DownArrow&lt;/strong&gt; : Navigate to method implementation/declaration&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;CTRL+ALT+UpArrow&lt;/strong&gt; : Navigate to previous method implementation in lexical order&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;CTRL+ALT+DownArrow&lt;/strong&gt; : Navigate to next method implementation in lexical order  &lt;/p&gt;
&lt;p&gt;&lt;strong&gt;CTRL+ALT+Home&lt;/strong&gt; : Navigate to the lexically first method implementation in this source unit  &lt;/p&gt;
&lt;p&gt;&lt;strong&gt;CTRL+ALT+End&lt;/strong&gt; : Navigate to the lexically last method implementation in this source unit  &lt;/p&gt;
&lt;p&gt;&lt;strong&gt;CTRL+/&lt;/strong&gt; : Toggle comment per line or selected block  &lt;/p&gt;</summary><category term="Delphi"></category></entry></feed>